# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.ClassloadProfilerTest.work

# Run progress: 0,00% complete, ETA 00:00:06
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 81,691 ops/s
# Warmup Iteration   2: 81,749 ops/s
# Warmup Iteration   3: 81,301 ops/s
Iteration   1: 80,879 ops/s
                 class.load:        83,183 classes/sec
                 class.load.norm:   1,000 classes/op
                 class.unload:      ≈ 0 classes/sec
                 class.unload.norm: ≈ 0 classes/op

Iteration   2: 80,847 ops/s
                 class.load:        81,192 classes/sec
                 class.load.norm:   1,000 classes/op
                 class.unload:      ≈ 0 classes/sec
                 class.unload.norm: ≈ 0 classes/op

Iteration   3: 81,775 ops/s
                 class.load:        84,290 classes/sec
                 class.load.norm:   1,000 classes/op
                 class.unload:      ≈ 0 classes/sec
                 class.unload.norm: ≈ 0 classes/op



Result "org.openjdk.jmh.it.profilers.ClassloadProfilerTest.work":
  81,167 ±(99.9%) 9,612 ops/s [Average]
  (min, avg, max) = (80,847, 81,167, 81,775), stdev = 0,527
  CI (99.9%): [71,555, 90,779] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.ClassloadProfilerTest.work:class.load":
  82,888 ±(99.9%) 28,644 classes/sec [Average]
  (min, avg, max) = (81,192, 82,888, 84,290), stdev = 1,570
  CI (99.9%): [54,245, 111,532] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.ClassloadProfilerTest.work:class.load.norm":
  1,000 ±(99.9%) 0,001 classes/op [Average]
  (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
  CI (99.9%): [1,000, 1,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.ClassloadProfilerTest.work:class.unload":
  ≈ 0 classes/sec

Secondary result "org.openjdk.jmh.it.profilers.ClassloadProfilerTest.work:class.unload.norm":
  ≈ 0 classes/op


# Run complete. Total time: 00:00:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt   Score    Error        Units
ClassloadProfilerTest.work                    thrpt    3  81,167 ±  9,612        ops/s
ClassloadProfilerTest.work:class.load         thrpt    3  82,888 ± 28,644  classes/sec
ClassloadProfilerTest.work:class.load.norm    thrpt    3   1,000 ±  0,001   classes/op
ClassloadProfilerTest.work:class.unload       thrpt    3     ≈ 0           classes/sec
ClassloadProfilerTest.work:class.unload.norm  thrpt    3     ≈ 0            classes/op
