# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 0,019 ops/ms
                 ops:  19,000 #
                 time: 1016270375,000 #

Iteration   2: 0,019 ops/ms
                 ops:  19,000 #
                 time: 1021187666,000 #

Iteration   3: 0,019 ops/ms
                 ops:  19,000 #
                 time: 1007666042,000 #

Iteration   4: 0,019 ops/ms
                 ops:  19,000 #
                 time: 1017203208,000 #

Iteration   5: 0,019 ops/ms
                 ops:  19,000 #
                 time: 1020100417,000 #



Result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test":
  0,019 ±(99.9%) 0,001 ops/ms [Average]
  (min, avg, max) = (0,019, 0,019, 0,019), stdev = 0,001
  CI (99.9%): [0,018, 0,019] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:ops":
  95,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,000, 19,000), stdev = 0,001
  CI (99.9%): [95,000, 95,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:time":
  5082427708,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1007666042,000, 1016485541,600, 1021187666,000), stdev = 5327340,165
  CI (99.9%): [5082427708,000, 5082427708,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt           Score    Error   Units
BatchSizeSanityTest.test       thrpt    5           0,019 ±  0,001  ops/ms
BatchSizeSanityTest.test:ops   thrpt    5          95,000                #
BatchSizeSanityTest.test:time  thrpt    5  5082427708,000                #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 53,681 ms/op
                 ops:  19,000 #
                 time: 1020020875,000 #

Iteration   2: 53,886 ms/op
                 ops:  19,000 #
                 time: 1023863042,000 #

Iteration   3: 53,750 ms/op
                 ops:  19,000 #
                 time: 1021269125,000 #

Iteration   4: 53,563 ms/op
                 ops:  19,000 #
                 time: 1017721333,000 #

Iteration   5: 52,678 ms/op
                 ops:  20,000 #
                 time: 1053593541,000 #



Result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test":
  53,512 ±(99.9%) 1,850 ms/op [Average]
  (min, avg, max) = (52,678, 53,512, 53,886), stdev = 0,480
  CI (99.9%): [51,662, 55,361] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:ops":
  96,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,200, 20,000), stdev = 0,447
  CI (99.9%): [96,000, 96,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:time":
  5136467916,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1017721333,000, 1027293583,200, 1053593541,000), stdev = 14868345,135
  CI (99.9%): [5136467916,000, 5136467916,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt           Score   Error  Units
BatchSizeSanityTest.test       avgt    5          53,512 ± 1,850  ms/op
BatchSizeSanityTest.test:ops   avgt    5          96,000              #
BatchSizeSanityTest.test:time  avgt    5  5136467916,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Sampling time
# Benchmark: org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 53,788 ±(99.9%) 1,416 ms/op
                 ops:     19,000 #
                 p0.00:   50,201 ms/op
                 p0.50:   54,198 ms/op
                 p0.90:   54,985 ms/op
                 p0.95:   55,509 ms/op
                 p0.99:   55,509 ms/op
                 p0.999:  55,509 ms/op
                 p0.9999: 55,509 ms/op
                 p1.00:   55,509 ms/op
                 time:    1024953417,000 #

Iteration   2: 53,357 ±(99.9%) 1,435 ms/op
                 ops:     19,000 #
                 p0.00:   51,184 ms/op
                 p0.50:   53,215 ms/op
                 p0.90:   55,050 ms/op
                 p0.95:   55,771 ms/op
                 p0.99:   55,771 ms/op
                 p0.999:  55,771 ms/op
                 p0.9999: 55,771 ms/op
                 p1.00:   55,771 ms/op
                 time:    1014778333,000 #

Iteration   3: 53,702 ±(99.9%) 1,703 ms/op
                 ops:     19,000 #
                 p0.00:   50,201 ms/op
                 p0.50:   54,985 ms/op
                 p0.90:   55,247 ms/op
                 p0.95:   55,443 ms/op
                 p0.99:   55,443 ms/op
                 p0.999:  55,443 ms/op
                 p0.9999: 55,443 ms/op
                 p1.00:   55,443 ms/op
                 time:    1021503417,000 #

Iteration   4: 53,602 ±(99.9%) 1,543 ms/op
                 ops:     19,000 #
                 p0.00:   50,266 ms/op
                 p0.50:   54,395 ms/op
                 p0.90:   55,050 ms/op
                 p0.95:   55,378 ms/op
                 p0.99:   55,378 ms/op
                 p0.999:  55,378 ms/op
                 p0.9999: 55,378 ms/op
                 p1.00:   55,378 ms/op
                 time:    1019402000,000 #

Iteration   5: 53,898 ±(99.9%) 1,170 ms/op
                 ops:     19,000 #
                 p0.00:   51,708 ms/op
                 p0.50:   54,788 ms/op
                 p0.90:   55,050 ms/op
                 p0.95:   55,312 ms/op
                 p0.99:   55,312 ms/op
                 p0.999:  55,312 ms/op
                 p0.9999: 55,312 ms/op
                 p1.00:   55,312 ms/op
                 time:    1025188875,000 #



Result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test":
  N = 95
  mean =     53,669 ±(99.9%) 0,559 ms/op

  Histogram, ms/op:
    [50,000, 50,500) = 4 
    [50,500, 51,000) = 4 
    [51,000, 51,500) = 7 
    [51,500, 52,000) = 3 
    [52,000, 52,500) = 10 
    [52,500, 53,000) = 1 
    [53,000, 53,500) = 8 
    [53,500, 54,000) = 7 
    [54,000, 54,500) = 6 
    [54,500, 55,000) = 36 
    [55,000, 55,500) = 7 

  Percentiles, ms/op:
      p(0,0000) =     50,201 ms/op
     p(50,0000) =     54,198 ms/op
     p(90,0000) =     55,011 ms/op
     p(95,0000) =     55,325 ms/op
     p(99,0000) =     55,771 ms/op
     p(99,9000) =     55,771 ms/op
     p(99,9900) =     55,771 ms/op
     p(99,9990) =     55,771 ms/op
     p(99,9999) =     55,771 ms/op
    p(100,0000) =     55,771 ms/op

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:ops":
  95,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,000, 19,000), stdev = 0,001
  CI (99.9%): [95,000, 95,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:time":
  5105826042,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1014778333,000, 1021165208,400, 1025188875,000), stdev = 4317287,447
  CI (99.9%): [5105826042,000, 5105826042,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt           Score   Error  Units
BatchSizeSanityTest.test          sample   95          53,669 ± 0,559  ms/op
BatchSizeSanityTest.test:ops      sample    5          95,000              #
BatchSizeSanityTest.test:p0.00    sample               50,201          ms/op
BatchSizeSanityTest.test:p0.50    sample               54,198          ms/op
BatchSizeSanityTest.test:p0.90    sample               55,011          ms/op
BatchSizeSanityTest.test:p0.95    sample               55,325          ms/op
BatchSizeSanityTest.test:p0.99    sample               55,771          ms/op
BatchSizeSanityTest.test:p0.999   sample               55,771          ms/op
BatchSizeSanityTest.test:p0.9999  sample               55,771          ms/op
BatchSizeSanityTest.test:p1.00    sample               55,771          ms/op
BatchSizeSanityTest.test:time     sample    5  5105826042,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 55,403 ms/op
                 ops:  1,000 #
                 time: 55467959,000 #

Iteration   2: 51,335 ms/op
                 ops:  1,000 #
                 time: 51379584,000 #

Iteration   3: 55,032 ms/op
                 ops:  1,000 #
                 time: 55088959,000 #

Iteration   4: 54,966 ms/op
                 ops:  1,000 #
                 time: 55085708,000 #

Iteration   5: 55,441 ms/op
                 ops:  1,000 #
                 time: 55517833,000 #



Result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test":
  N = 5
  mean =     54,435 ±(99.9%) 6,724 ms/op

  Histogram, ms/op:
    [51,000, 51,500) = 1 
    [51,500, 52,000) = 0 
    [52,000, 52,500) = 0 
    [52,500, 53,000) = 0 
    [53,000, 53,500) = 0 
    [53,500, 54,000) = 0 
    [54,000, 54,500) = 0 
    [54,500, 55,000) = 1 
    [55,000, 55,500) = 3 

  Percentiles, ms/op:
      p(0,0000) =     51,335 ms/op
     p(50,0000) =     55,032 ms/op
     p(90,0000) =     55,441 ms/op
     p(95,0000) =     55,441 ms/op
     p(99,0000) =     55,441 ms/op
     p(99,9000) =     55,441 ms/op
     p(99,9900) =     55,441 ms/op
     p(99,9990) =     55,441 ms/op
     p(99,9999) =     55,441 ms/op
    p(100,0000) =     55,441 ms/op

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:ops":
  5,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
  CI (99.9%): [5,000, 5,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:time":
  272540043,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (51379584,000, 54508008,600, 55517833,000), stdev = 1760648,356
  CI (99.9%): [272540043,000, 272540043,000] (assumes normal distribution)


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt          Score   Error  Units
BatchSizeSanityTest.test         ss    5         54,435 ± 6,724  ms/op
BatchSizeSanityTest.test:ops     ss    5          5,000              #
BatchSizeSanityTest.test:time    ss    5  272540043,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 0,002 ops/ms
                 ops:  19,000 #
                 time: 1030738750,000 #

Iteration   2: 0,002 ops/ms
                 ops:  19,000 #
                 time: 1017960625,000 #

Iteration   3: 0,002 ops/ms
                 ops:  19,000 #
                 time: 1023445458,000 #

Iteration   4: 0,002 ops/ms
                 ops:  19,000 #
                 time: 1018259834,000 #

Iteration   5: 0,002 ops/ms
                 ops:  19,000 #
                 time: 1011325709,000 #



Result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test":
  0,002 ±(99.9%) 0,001 ops/ms [Average]
  (min, avg, max) = (0,002, 0,002, 0,002), stdev = 0,001
  CI (99.9%): [0,002, 0,002] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:ops":
  95,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,000, 19,000), stdev = 0,001
  CI (99.9%): [95,000, 95,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:time":
  5101730376,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1011325709,000, 1020346075,200, 1030738750,000), stdev = 7228825,019
  CI (99.9%): [5101730376,000, 5101730376,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt           Score    Error   Units
BatchSizeSanityTest.test       thrpt    5           0,002 ±  0,001  ops/ms
BatchSizeSanityTest.test:ops   thrpt    5          95,000                #
BatchSizeSanityTest.test:time  thrpt    5  5101730376,000                #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 537,665 ms/op
                 ops:  19,000 #
                 time: 1021659708,000 #

Iteration   2: 541,672 ms/op
                 ops:  19,000 #
                 time: 1029205542,000 #

Iteration   3: 528,957 ms/op
                 ops:  20,000 #
                 time: 1057940417,000 #

Iteration   4: 540,196 ms/op
                 ops:  19,000 #
                 time: 1026410542,000 #

Iteration   5: 536,495 ms/op
                 ops:  19,000 #
                 time: 1019370416,000 #



Result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test":
  536,997 ±(99.9%) 19,005 ms/op [Average]
  (min, avg, max) = (528,957, 536,997, 541,672), stdev = 4,935
  CI (99.9%): [517,993, 556,002] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:ops":
  96,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,200, 20,000), stdev = 0,447
  CI (99.9%): [96,000, 96,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:time":
  5154586625,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1019370416,000, 1030917325,000, 1057940417,000), stdev = 15592653,521
  CI (99.9%): [5154586625,000, 5154586625,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt           Score    Error  Units
BatchSizeSanityTest.test       avgt    5         536,997 ± 19,005  ms/op
BatchSizeSanityTest.test:ops   avgt    5          96,000               #
BatchSizeSanityTest.test:time  avgt    5  5154586625,000               #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Sampling time
# Benchmark: org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 534,512 ms/op
                 ops:     20,000 #
                 p0.00:   533,201 ms/op
                 p0.50:   534,512 ms/op
                 p0.90:   535,822 ms/op
                 p0.95:   535,822 ms/op
                 p0.99:   535,822 ms/op
                 p0.999:  535,822 ms/op
                 p0.9999: 535,822 ms/op
                 p1.00:   535,822 ms/op
                 time:    1071136625,000 #

Iteration   2: 532,677 ms/op
                 ops:     20,000 #
                 p0.00:   526,385 ms/op
                 p0.50:   532,677 ms/op
                 p0.90:   538,968 ms/op
                 p0.95:   538,968 ms/op
                 p0.99:   538,968 ms/op
                 p0.999:  538,968 ms/op
                 p0.9999: 538,968 ms/op
                 p1.00:   538,968 ms/op
                 time:    1065965583,000 #

Iteration   3: 542,114 ms/op
                 ops:     20,000 #
                 p0.00:   542,114 ms/op
                 p0.50:   542,114 ms/op
                 p0.90:   542,114 ms/op
                 p0.95:   542,114 ms/op
                 p0.99:   542,114 ms/op
                 p0.999:  542,114 ms/op
                 p0.9999: 542,114 ms/op
                 p1.00:   542,114 ms/op
                 time:    1085756042,000 #

Iteration   4: 531,104 ms/op
                 ops:     20,000 #
                 p0.00:   527,958 ms/op
                 p0.50:   531,104 ms/op
                 p0.90:   534,249 ms/op
                 p0.95:   534,249 ms/op
                 p0.99:   534,249 ms/op
                 p0.999:  534,249 ms/op
                 p0.9999: 534,249 ms/op
                 p1.00:   534,249 ms/op
                 time:    1062767000,000 #

Iteration   5: 538,444 ms/op
                 ops:     20,000 #
                 p0.00:   535,822 ms/op
                 p0.50:   538,444 ms/op
                 p0.90:   541,065 ms/op
                 p0.95:   541,065 ms/op
                 p0.99:   541,065 ms/op
                 p0.999:  541,065 ms/op
                 p0.9999: 541,065 ms/op
                 p1.00:   541,065 ms/op
                 time:    1077302958,000 #



Result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test":
  N = 10
  mean =    535,770 ±(99.9%) 8,384 ms/op

  Histogram, ms/op:
    [520,000, 522,500) = 0 
    [522,500, 525,000) = 0 
    [525,000, 527,500) = 1 
    [527,500, 530,000) = 1 
    [530,000, 532,500) = 0 
    [532,500, 535,000) = 2 
    [535,000, 537,500) = 2 
    [537,500, 540,000) = 1 
    [540,000, 542,500) = 3 
    [542,500, 545,000) = 0 
    [545,000, 547,500) = 0 

  Percentiles, ms/op:
      p(0,0000) =    526,385 ms/op
     p(50,0000) =    535,822 ms/op
     p(90,0000) =    542,114 ms/op
     p(95,0000) =    542,114 ms/op
     p(99,0000) =    542,114 ms/op
     p(99,9000) =    542,114 ms/op
     p(99,9900) =    542,114 ms/op
     p(99,9990) =    542,114 ms/op
     p(99,9999) =    542,114 ms/op
    p(100,0000) =    542,114 ms/op

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:ops":
  100,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (20,000, 20,000, 20,000), stdev = 0,001
  CI (99.9%): [100,000, 100,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:time":
  5362928208,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1062767000,000, 1072585641,600, 1085756042,000), stdev = 9192973,792
  CI (99.9%): [5362928208,000, 5362928208,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt           Score   Error  Units
BatchSizeSanityTest.test          sample   10         535,770 ± 8,384  ms/op
BatchSizeSanityTest.test:ops      sample    5         100,000              #
BatchSizeSanityTest.test:p0.00    sample              526,385          ms/op
BatchSizeSanityTest.test:p0.50    sample              535,822          ms/op
BatchSizeSanityTest.test:p0.90    sample              542,114          ms/op
BatchSizeSanityTest.test:p0.95    sample              542,114          ms/op
BatchSizeSanityTest.test:p0.99    sample              542,114          ms/op
BatchSizeSanityTest.test:p0.999   sample              542,114          ms/op
BatchSizeSanityTest.test:p0.9999  sample              542,114          ms/op
BatchSizeSanityTest.test:p1.00    sample              542,114          ms/op
BatchSizeSanityTest.test:time     sample    5  5362928208,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 536,415 ms/op
                 ops:  10,000 #
                 time: 536542000,000 #

Iteration   2: 533,913 ms/op
                 ops:  10,000 #
                 time: 533942084,000 #

Iteration   3: 526,366 ms/op
                 ops:  10,000 #
                 time: 526390208,000 #

Iteration   4: 540,755 ms/op
                 ops:  10,000 #
                 time: 540779375,000 #

Iteration   5: 535,004 ms/op
                 ops:  10,000 #
                 time: 535017708,000 #



Result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test":
  N = 5
  mean =    534,491 ±(99.9%) 20,152 ms/op

  Histogram, ms/op:
    [520,000, 522,500) = 0 
    [522,500, 525,000) = 0 
    [525,000, 527,500) = 1 
    [527,500, 530,000) = 0 
    [530,000, 532,500) = 0 
    [532,500, 535,000) = 1 
    [535,000, 537,500) = 2 
    [537,500, 540,000) = 0 
    [540,000, 542,500) = 1 
    [542,500, 545,000) = 0 
    [545,000, 547,500) = 0 

  Percentiles, ms/op:
      p(0,0000) =    526,366 ms/op
     p(50,0000) =    535,004 ms/op
     p(90,0000) =    540,755 ms/op
     p(95,0000) =    540,755 ms/op
     p(99,0000) =    540,755 ms/op
     p(99,9000) =    540,755 ms/op
     p(99,9900) =    540,755 ms/op
     p(99,9990) =    540,755 ms/op
     p(99,9999) =    540,755 ms/op
    p(100,0000) =    540,755 ms/op

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:ops":
  50,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (10,000, 10,000, 10,000), stdev = 0,001
  CI (99.9%): [50,000, 50,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:time":
  2672671375,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (526390208,000, 534534275,000, 540779375,000), stdev = 5242672,473
  CI (99.9%): [2672671375,000, 2672671375,000] (assumes normal distribution)


# Run complete. Total time: 00:00:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt           Score    Error  Units
BatchSizeSanityTest.test         ss    5         534,491 ± 20,152  ms/op
BatchSizeSanityTest.test:ops     ss    5          50,000               #
BatchSizeSanityTest.test:time    ss    5  2672671375,000               #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: ≈ 10⁻⁴ ops/ms
                 ops:  19,000 #
                 time: 1009025167,000 #

Iteration   2: ≈ 10⁻⁴ ops/ms
                 ops:  19,000 #
                 time: 1009382167,000 #

Iteration   3: ≈ 10⁻⁴ ops/ms
                 ops:  19,000 #
                 time: 1011740375,000 #

Iteration   4: ≈ 10⁻⁴ ops/ms
                 ops:  19,000 #
                 time: 1018388625,000 #

Iteration   5: ≈ 10⁻⁴ ops/ms
                 ops:  19,000 #
                 time: 1016285833,000 #



Result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test":
  ≈ 10⁻⁴ ops/ms

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:ops":
  95,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,000, 19,000), stdev = 0,001
  CI (99.9%): [95,000, 95,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:time":
  5064822167,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1009025167,000, 1012964433,400, 1018388625,000), stdev = 4192323,971
  CI (99.9%): [5064822167,000, 5064822167,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt           Score    Error   Units
BatchSizeSanityTest.test       thrpt    5          ≈ 10⁻⁴           ops/ms
BatchSizeSanityTest.test:ops   thrpt    5          95,000                #
BatchSizeSanityTest.test:time  thrpt    5  5064822167,000                #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 5383,673 ms/op
                 ops:  19,000 #
                 time: 1022994625,000 #

Iteration   2: 5312,152 ms/op
                 ops:  19,000 #
                 time: 1009335291,000 #

Iteration   3: 5407,664 ms/op
                 ops:  19,000 #
                 time: 1027497166,000 #

Iteration   4: 5334,625 ms/op
                 ops:  19,000 #
                 time: 1013607292,000 #

Iteration   5: 5400,245 ms/op
                 ops:  19,000 #
                 time: 1026071459,000 #



Result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test":
  5367,672 ±(99.9%) 162,128 ms/op [Average]
  (min, avg, max) = (5312,152, 5367,672, 5407,664), stdev = 42,104
  CI (99.9%): [5205,544, 5529,800] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:ops":
  95,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,000, 19,000), stdev = 0,001
  CI (99.9%): [95,000, 95,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:time":
  5099505833,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1009335291,000, 1019901166,600, 1027497166,000), stdev = 8009241,299
  CI (99.9%): [5099505833,000, 5099505833,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt           Score     Error  Units
BatchSizeSanityTest.test       avgt    5        5367,672 ± 162,128  ms/op
BatchSizeSanityTest.test:ops   avgt    5          95,000                #
BatchSizeSanityTest.test:time  avgt    5  5099505833,000                #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Sampling time
# Benchmark: org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 5268,046 ms/op
                 ops:     100,000 #
                 p0.00:   5268,046 ms/op
                 p0.50:   5268,046 ms/op
                 p0.90:   5268,046 ms/op
                 p0.95:   5268,046 ms/op
                 p0.99:   5268,046 ms/op
                 p0.999:  5268,046 ms/op
                 p0.9999: 5268,046 ms/op
                 p1.00:   5268,046 ms/op
                 time:    5271532375,000 #

Iteration   2: 5226,103 ms/op
                 ops:     100,000 #
                 p0.00:   5226,103 ms/op
                 p0.50:   5226,103 ms/op
                 p0.90:   5226,103 ms/op
                 p0.95:   5226,103 ms/op
                 p0.99:   5226,103 ms/op
                 p0.999:  5226,103 ms/op
                 p0.9999: 5226,103 ms/op
                 p1.00:   5226,103 ms/op
                 time:    5229941292,000 #

Iteration   3: 5351,932 ms/op
                 ops:     100,000 #
                 p0.00:   5351,932 ms/op
                 p0.50:   5351,932 ms/op
                 p0.90:   5351,932 ms/op
                 p0.95:   5351,932 ms/op
                 p0.99:   5351,932 ms/op
                 p0.999:  5351,932 ms/op
                 p0.9999: 5351,932 ms/op
                 p1.00:   5351,932 ms/op
                 time:    5357350833,000 #

Iteration   4: 5360,321 ms/op
                 ops:     100,000 #
                 p0.00:   5360,321 ms/op
                 p0.50:   5360,321 ms/op
                 p0.90:   5360,321 ms/op
                 p0.95:   5360,321 ms/op
                 p0.99:   5360,321 ms/op
                 p0.999:  5360,321 ms/op
                 p0.9999: 5360,321 ms/op
                 p1.00:   5360,321 ms/op
                 time:    5364227916,000 #

Iteration   5: 5318,377 ms/op
                 ops:     100,000 #
                 p0.00:   5318,377 ms/op
                 p0.50:   5318,377 ms/op
                 p0.90:   5318,377 ms/op
                 p0.95:   5318,377 ms/op
                 p0.99:   5318,377 ms/op
                 p0.999:  5318,377 ms/op
                 p0.9999: 5318,377 ms/op
                 p1.00:   5318,377 ms/op
                 time:    5326552708,000 #



Result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test":
  N = 5
  mean =   5304,956 ±(99.9%) 219,793 ms/op

  Histogram, ms/op:
    [5200,000, 5212,500) = 0 
    [5212,500, 5225,000) = 0 
    [5225,000, 5237,500) = 1 
    [5237,500, 5250,000) = 0 
    [5250,000, 5262,500) = 0 
    [5262,500, 5275,000) = 1 
    [5275,000, 5287,500) = 0 
    [5287,500, 5300,000) = 0 
    [5300,000, 5312,500) = 0 
    [5312,500, 5325,000) = 1 
    [5325,000, 5337,500) = 0 
    [5337,500, 5350,000) = 0 
    [5350,000, 5362,500) = 2 
    [5362,500, 5375,000) = 0 
    [5375,000, 5387,500) = 0 

  Percentiles, ms/op:
      p(0,0000) =   5226,103 ms/op
     p(50,0000) =   5318,377 ms/op
     p(90,0000) =   5360,321 ms/op
     p(95,0000) =   5360,321 ms/op
     p(99,0000) =   5360,321 ms/op
     p(99,9000) =   5360,321 ms/op
     p(99,9900) =   5360,321 ms/op
     p(99,9990) =   5360,321 ms/op
     p(99,9999) =   5360,321 ms/op
    p(100,0000) =   5360,321 ms/op

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:ops":
  500,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (100,000, 100,000, 100,000), stdev = 0,001
  CI (99.9%): [500,000, 500,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:time":
  26549605124,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (5229941292,000, 5309921024,800, 5364227916,000), stdev = 57762193,769
  CI (99.9%): [26549605124,000, 26549605124,000] (assumes normal distribution)


# Run complete. Total time: 00:00:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt            Score     Error  Units
BatchSizeSanityTest.test          sample    5         5304,956 ± 219,793  ms/op
BatchSizeSanityTest.test:ops      sample    5          500,000                #
BatchSizeSanityTest.test:p0.00    sample              5226,103            ms/op
BatchSizeSanityTest.test:p0.50    sample              5318,377            ms/op
BatchSizeSanityTest.test:p0.90    sample              5360,321            ms/op
BatchSizeSanityTest.test:p0.95    sample              5360,321            ms/op
BatchSizeSanityTest.test:p0.99    sample              5360,321            ms/op
BatchSizeSanityTest.test:p0.999   sample              5360,321            ms/op
BatchSizeSanityTest.test:p0.9999  sample              5360,321            ms/op
BatchSizeSanityTest.test:p1.00    sample              5360,321            ms/op
BatchSizeSanityTest.test:time     sample    5  26549605124,000                #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 5342,573 ms/op
                 ops:  100,000 #
                 time: 5342643500,000 #

Iteration   2: 5340,624 ms/op
                 ops:  100,000 #
                 time: 5340645167,000 #

Iteration   3: 5341,511 ms/op
                 ops:  100,000 #
                 time: 5341535334,000 #

Iteration   4: 5356,218 ms/op
                 ops:  100,000 #
                 time: 5356234500,000 #

Iteration   5: 5374,785 ms/op
                 ops:  100,000 #
                 time: 5374799792,000 #



Result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test":
  N = 5
  mean =   5351,142 ±(99.9%) 56,512 ms/op

  Histogram, ms/op:
    [5340,000, 5342,500) = 2 
    [5342,500, 5345,000) = 1 
    [5345,000, 5347,500) = 0 
    [5347,500, 5350,000) = 0 
    [5350,000, 5352,500) = 0 
    [5352,500, 5355,000) = 0 
    [5355,000, 5357,500) = 1 
    [5357,500, 5360,000) = 0 
    [5360,000, 5362,500) = 0 
    [5362,500, 5365,000) = 0 
    [5365,000, 5367,500) = 0 
    [5367,500, 5370,000) = 0 
    [5370,000, 5372,500) = 0 
    [5372,500, 5375,000) = 1 
    [5375,000, 5377,500) = 0 

  Percentiles, ms/op:
      p(0,0000) =   5340,624 ms/op
     p(50,0000) =   5342,573 ms/op
     p(90,0000) =   5374,785 ms/op
     p(95,0000) =   5374,785 ms/op
     p(99,0000) =   5374,785 ms/op
     p(99,9000) =   5374,785 ms/op
     p(99,9900) =   5374,785 ms/op
     p(99,9990) =   5374,785 ms/op
     p(99,9999) =   5374,785 ms/op
    p(100,0000) =   5374,785 ms/op

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:ops":
  500,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (100,000, 100,000, 100,000), stdev = 0,001
  CI (99.9%): [500,000, 500,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.BatchSizeSanityTest.test:time":
  26755858293,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (5340645167,000, 5351171658,600, 5374799792,000), stdev = 14665574,633
  CI (99.9%): [26755858293,000, 26755858293,000] (assumes normal distribution)


# Run complete. Total time: 00:00:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt            Score    Error  Units
BatchSizeSanityTest.test         ss    5         5351,142 ± 56,512  ms/op
BatchSizeSanityTest.test:ops     ss    5          500,000               #
BatchSizeSanityTest.test:time    ss    5  26755858293,000               #
