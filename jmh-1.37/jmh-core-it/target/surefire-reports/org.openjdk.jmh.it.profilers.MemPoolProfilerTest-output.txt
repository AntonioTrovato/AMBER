# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work

# Run progress: 0,00% complete, ETA 00:00:06
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 82,944 ops/s
# Warmup Iteration   2: 81,947 ops/s
# Warmup Iteration   3: 81,251 ops/s
Iteration   1: 83,358 ops/s
                 mempool.Code Cache.used:             2193,000 KiB
                 mempool.Compressed Class Space.used: 753,125 KiB
                 mempool.Metaspace.used:              6587,977 KiB
                 mempool.PS Eden Space.used:          11803,531 KiB
                 mempool.PS Old Gen.used:             ≈ 0 KiB
                 mempool.PS Survivor Space.used:      ≈ 0 KiB
                 mempool.total.codeheap.used:         2193,000 KiB
                 mempool.total.used:                  21337,633 KiB

Iteration   2: 83,371 ops/s
                 mempool.Code Cache.used:             2210,500 KiB
                 mempool.Compressed Class Space.used: 753,125 KiB
                 mempool.Metaspace.used:              6592,906 KiB
                 mempool.PS Eden Space.used:          11803,531 KiB
                 mempool.PS Old Gen.used:             ≈ 0 KiB
                 mempool.PS Survivor Space.used:      ≈ 0 KiB
                 mempool.total.codeheap.used:         2210,500 KiB
                 mempool.total.used:                  21360,063 KiB

Iteration   3: 82,744 ops/s
                 mempool.Code Cache.used:             2216,438 KiB
                 mempool.Compressed Class Space.used: 753,125 KiB
                 mempool.Metaspace.used:              6594,148 KiB
                 mempool.PS Eden Space.used:          11803,531 KiB
                 mempool.PS Old Gen.used:             ≈ 0 KiB
                 mempool.PS Survivor Space.used:      ≈ 0 KiB
                 mempool.total.codeheap.used:         2216,438 KiB
                 mempool.total.used:                  21367,242 KiB



Result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work":
  83,157 ±(99.9%) 6,540 ops/s [Average]
  (min, avg, max) = (82,744, 83,157, 83,371), stdev = 0,359
  CI (99.9%): [76,617, 89,698] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.Code Cache.used":
  2216,438 ±(99.9%) 0,001 KiB [Maximum]
  (min, avg, max) = (2193,000, 2206,646, 2216,438), stdev = 12,185
  CI (99.9%): [2216,438, 2216,438] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.Compressed Class Space.used":
  753,125 ±(99.9%) 0,001 KiB [Maximum]
  (min, avg, max) = (753,125, 753,125, 753,125), stdev = 0,001
  CI (99.9%): [753,125, 753,125] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.Metaspace.used":
  6594,148 ±(99.9%) 0,001 KiB [Maximum]
  (min, avg, max) = (6587,977, 6591,677, 6594,148), stdev = 3,264
  CI (99.9%): [6594,148, 6594,148] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.PS Eden Space.used":
  11803,531 ±(99.9%) 0,001 KiB [Maximum]
  (min, avg, max) = (11803,531, 11803,531, 11803,531), stdev = 0,001
  CI (99.9%): [11803,531, 11803,531] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.PS Old Gen.used":
  ≈ 0 KiB

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.PS Survivor Space.used":
  ≈ 0 KiB

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.total.codeheap.used":
  2216,438 ±(99.9%) 0,001 KiB [Maximum]
  (min, avg, max) = (2193,000, 2206,646, 2216,438), stdev = 12,185
  CI (99.9%): [2216,438, 2216,438] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.total.used":
  21367,242 ±(99.9%) 0,001 KiB [Maximum]
  (min, avg, max) = (21337,633, 21354,979, 21367,242), stdev = 15,445
  CI (99.9%): [21367,242, 21367,242] (assumes normal distribution)


# Run complete. Total time: 00:00:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt      Score   Error  Units
MemPoolProfilerTest.work                                      thrpt    3     83,157 ± 6,540  ops/s
MemPoolProfilerTest.work:mempool.Code Cache.used              thrpt    3   2216,438            KiB
MemPoolProfilerTest.work:mempool.Compressed Class Space.used  thrpt    3    753,125            KiB
MemPoolProfilerTest.work:mempool.Metaspace.used               thrpt    3   6594,148            KiB
MemPoolProfilerTest.work:mempool.PS Eden Space.used           thrpt    3  11803,531            KiB
MemPoolProfilerTest.work:mempool.PS Old Gen.used              thrpt    3        ≈ 0            KiB
MemPoolProfilerTest.work:mempool.PS Survivor Space.used       thrpt    3        ≈ 0            KiB
MemPoolProfilerTest.work:mempool.total.codeheap.used          thrpt    3   2216,438            KiB
MemPoolProfilerTest.work:mempool.total.used                   thrpt    3  21367,242            KiB
