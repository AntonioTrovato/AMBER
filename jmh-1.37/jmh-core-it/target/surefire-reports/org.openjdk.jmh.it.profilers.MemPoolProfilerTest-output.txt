# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work

# Run progress: 0,00% complete, ETA 00:00:06
# Fork: 1 of 1
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
# Warmup Iteration   1: 82,294 ops/s
# Warmup Iteration   2: 82,777 ops/s
# Warmup Iteration   3: 83,276 ops/s
Iteration   1: 80,543 ops/s
                 mempool.Code Cache.used:             2132,000 KiB
                 mempool.Compressed Class Space.used: 753,055 KiB
                 mempool.Metaspace.used:              6562,023 KiB
                 mempool.PS Eden Space.used:          11803,367 KiB
                 mempool.PS Old Gen.used:             ≈ 0 KiB
                 mempool.PS Survivor Space.used:      ≈ 0 KiB
                 mempool.total.codeheap.used:         2132,000 KiB
                 mempool.total.used:                  21250,445 KiB

Iteration   2: 83,039 ops/s
                 mempool.Code Cache.used:             2137,188 KiB
                 mempool.Compressed Class Space.used: 753,055 KiB
                 mempool.Metaspace.used:              6562,500 KiB
                 mempool.PS Eden Space.used:          11803,367 KiB
                 mempool.PS Old Gen.used:             ≈ 0 KiB
                 mempool.PS Survivor Space.used:      ≈ 0 KiB
                 mempool.total.codeheap.used:         2137,188 KiB
                 mempool.total.used:                  21256,109 KiB

Iteration   3: 82,427 ops/s
                 mempool.Code Cache.used:             2141,625 KiB
                 mempool.Compressed Class Space.used: 753,055 KiB
                 mempool.Metaspace.used:              6563,742 KiB
                 mempool.PS Eden Space.used:          11803,367 KiB
                 mempool.PS Old Gen.used:             ≈ 0 KiB
                 mempool.PS Survivor Space.used:      ≈ 0 KiB
                 mempool.total.codeheap.used:         2141,625 KiB
                 mempool.total.used:                  21261,789 KiB



Result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work":
  82,003 ±(99.9%) 23,733 ops/s [Average]
  (min, avg, max) = (80,543, 82,003, 83,039), stdev = 1,301
  CI (99.9%): [58,270, 105,736] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.Code Cache.used":
  2141,625 ±(99.9%) 0,001 KiB [Maximum]
  (min, avg, max) = (2132,000, 2136,938, 2141,625), stdev = 4,817
  CI (99.9%): [2141,625, 2141,625] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.Compressed Class Space.used":
  753,055 ±(99.9%) 0,001 KiB [Maximum]
  (min, avg, max) = (753,055, 753,055, 753,055), stdev = 0,001
  CI (99.9%): [753,055, 753,055] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.Metaspace.used":
  6563,742 ±(99.9%) 0,001 KiB [Maximum]
  (min, avg, max) = (6562,023, 6562,755, 6563,742), stdev = 0,887
  CI (99.9%): [6563,742, 6563,742] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.PS Eden Space.used":
  11803,367 ±(99.9%) 0,001 KiB [Maximum]
  (min, avg, max) = (11803,367, 11803,367, 11803,367), stdev = 0,001
  CI (99.9%): [11803,367, 11803,367] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.PS Old Gen.used":
  ≈ 0 KiB

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.PS Survivor Space.used":
  ≈ 0 KiB

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.total.codeheap.used":
  2141,625 ±(99.9%) 0,001 KiB [Maximum]
  (min, avg, max) = (2132,000, 2136,938, 2141,625), stdev = 4,817
  CI (99.9%): [2141,625, 2141,625] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.MemPoolProfilerTest.work:mempool.total.used":
  21261,789 ±(99.9%) 0,001 KiB [Maximum]
  (min, avg, max) = (21250,445, 21256,115, 21261,789), stdev = 5,672
  CI (99.9%): [21261,789, 21261,789] (assumes normal distribution)


# Run complete. Total time: 00:00:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt      Score    Error  Units
MemPoolProfilerTest.work                                      thrpt    3     82,003 ± 23,733  ops/s
MemPoolProfilerTest.work:mempool.Code Cache.used              thrpt    3   2141,625             KiB
MemPoolProfilerTest.work:mempool.Compressed Class Space.used  thrpt    3    753,055             KiB
MemPoolProfilerTest.work:mempool.Metaspace.used               thrpt    3   6563,742             KiB
MemPoolProfilerTest.work:mempool.PS Eden Space.used           thrpt    3  11803,367             KiB
MemPoolProfilerTest.work:mempool.PS Old Gen.used              thrpt    3        ≈ 0             KiB
MemPoolProfilerTest.work:mempool.PS Survivor Space.used       thrpt    3        ≈ 0             KiB
MemPoolProfilerTest.work:mempool.total.codeheap.used          thrpt    3   2141,625             KiB
MemPoolProfilerTest.work:mempool.total.used                   thrpt    3  21261,789             KiB
