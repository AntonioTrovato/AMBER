# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 0,019 ops/ms
                 ops:  19,000 #
                 time: 1011322833,000 #

Iteration   2: 0,019 ops/ms
                 ops:  19,000 #
                 time: 1024529208,000 #

Iteration   3: 0,019 ops/ms
                 ops:  19,000 #
                 time: 1020429959,000 #

Iteration   4: 0,019 ops/ms
                 ops:  19,000 #
                 time: 1018747167,000 #

Iteration   5: 0,019 ops/ms
                 ops:  19,000 #
                 time: 1014902000,000 #



Result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test":
  0,019 ±(99.9%) 0,001 ops/ms [Average]
  (min, avg, max) = (0,019, 0,019, 0,019), stdev = 0,001
  CI (99.9%): [0,018, 0,019] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:ops":
  95,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,000, 19,000), stdev = 0,001
  CI (99.9%): [95,000, 95,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:time":
  5089931167,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1011322833,000, 1017986233,400, 1024529208,000), stdev = 5081208,811
  CI (99.9%): [5089931167,000, 5089931167,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt           Score    Error   Units
OpsPerInvSanityTest.test       thrpt    5           0,019 ±  0,001  ops/ms
OpsPerInvSanityTest.test:ops   thrpt    5          95,000                #
OpsPerInvSanityTest.test:time  thrpt    5  5089931167,000                #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 53,761 ms/op
                 ops:  19,000 #
                 time: 1021562250,000 #

Iteration   2: 53,907 ms/op
                 ops:  19,000 #
                 time: 1024262834,000 #

Iteration   3: 53,994 ms/op
                 ops:  19,000 #
                 time: 1025898625,000 #

Iteration   4: 53,380 ms/op
                 ops:  19,000 #
                 time: 1014285000,000 #

Iteration   5: 52,994 ms/op
                 ops:  19,000 #
                 time: 1006904625,000 #



Result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test":
  53,607 ±(99.9%) 1,601 ms/op [Average]
  (min, avg, max) = (52,994, 53,607, 53,994), stdev = 0,416
  CI (99.9%): [52,007, 55,208] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:ops":
  95,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,000, 19,000), stdev = 0,001
  CI (99.9%): [95,000, 95,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:time":
  5092913334,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1006904625,000, 1018582666,800, 1025898625,000), stdev = 7897975,374
  CI (99.9%): [5092913334,000, 5092913334,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt           Score   Error  Units
OpsPerInvSanityTest.test       avgt    5          53,607 ± 1,601  ms/op
OpsPerInvSanityTest.test:ops   avgt    5          95,000              #
OpsPerInvSanityTest.test:time  avgt    5  5092913334,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Sampling time
# Benchmark: org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 53,226 ±(99.9%) 1,916 ms/op
                 ops:     19,000 #
                 p0.00:   50,004 ms/op
                 p0.50:   53,477 ms/op
                 p0.90:   55,181 ms/op
                 p0.95:   56,295 ms/op
                 p0.99:   56,295 ms/op
                 p0.999:  56,295 ms/op
                 p0.9999: 56,295 ms/op
                 p1.00:   56,295 ms/op
                 time:    1014053250,000 #

Iteration   2: 53,812 ±(99.9%) 1,338 ms/op
                 ops:     19,000 #
                 p0.00:   50,725 ms/op
                 p0.50:   54,395 ms/op
                 p0.90:   54,985 ms/op
                 p0.95:   54,985 ms/op
                 p0.99:   54,985 ms/op
                 p0.999:  54,985 ms/op
                 p0.9999: 54,985 ms/op
                 p1.00:   54,985 ms/op
                 time:    1023533583,000 #

Iteration   3: 53,326 ±(99.9%) 1,551 ms/op
                 ops:     19,000 #
                 p0.00:   50,332 ms/op
                 p0.50:   53,608 ms/op
                 p0.90:   55,116 ms/op
                 p0.95:   56,033 ms/op
                 p0.99:   56,033 ms/op
                 p0.999:  56,033 ms/op
                 p0.9999: 56,033 ms/op
                 p1.00:   56,033 ms/op
                 time:    1014297208,000 #

Iteration   4: 53,871 ±(99.9%) 1,475 ms/op
                 ops:     19,000 #
                 p0.00:   50,594 ms/op
                 p0.50:   54,526 ms/op
                 p0.90:   55,378 ms/op
                 p0.95:   55,771 ms/op
                 p0.99:   55,771 ms/op
                 p0.999:  55,771 ms/op
                 p0.9999: 55,771 ms/op
                 p1.00:   55,771 ms/op
                 time:    1024568667,000 #

Iteration   5: 53,060 ±(99.9%) 1,708 ms/op
                 ops:     19,000 #
                 p0.00:   50,201 ms/op
                 p0.50:   52,888 ms/op
                 p0.90:   55,116 ms/op
                 p0.95:   56,623 ms/op
                 p0.99:   56,623 ms/op
                 p0.999:  56,623 ms/op
                 p0.9999: 56,623 ms/op
                 p1.00:   56,623 ms/op
                 time:    1009055583,000 #



Result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test":
  N = 95
  mean =     53,459 ±(99.9%) 0,621 ms/op

  Histogram, ms/op:
    [50,000, 50,500) = 7 
    [50,500, 51,000) = 8 
    [51,000, 51,500) = 3 
    [51,500, 52,000) = 8 
    [52,000, 52,500) = 3 
    [52,500, 53,000) = 8 
    [53,000, 53,500) = 4 
    [53,500, 54,000) = 6 
    [54,000, 54,500) = 8 
    [54,500, 55,000) = 26 
    [55,000, 55,500) = 10 
    [55,500, 56,000) = 1 
    [56,000, 56,500) = 2 

  Percentiles, ms/op:
      p(0,0000) =     50,004 ms/op
     p(50,0000) =     54,067 ms/op
     p(90,0000) =     55,116 ms/op
     p(95,0000) =     55,457 ms/op
     p(99,0000) =     56,623 ms/op
     p(99,9000) =     56,623 ms/op
     p(99,9900) =     56,623 ms/op
     p(99,9990) =     56,623 ms/op
     p(99,9999) =     56,623 ms/op
    p(100,0000) =     56,623 ms/op

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:ops":
  95,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,000, 19,000), stdev = 0,001
  CI (99.9%): [95,000, 95,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:time":
  5085508291,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1009055583,000, 1017101658,200, 1024568667,000), stdev = 6689972,658
  CI (99.9%): [5085508291,000, 5085508291,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt           Score   Error  Units
OpsPerInvSanityTest.test          sample   95          53,459 ± 0,621  ms/op
OpsPerInvSanityTest.test:ops      sample    5          95,000              #
OpsPerInvSanityTest.test:p0.00    sample               50,004          ms/op
OpsPerInvSanityTest.test:p0.50    sample               54,067          ms/op
OpsPerInvSanityTest.test:p0.90    sample               55,116          ms/op
OpsPerInvSanityTest.test:p0.95    sample               55,457          ms/op
OpsPerInvSanityTest.test:p0.99    sample               56,623          ms/op
OpsPerInvSanityTest.test:p0.999   sample               56,623          ms/op
OpsPerInvSanityTest.test:p0.9999  sample               56,623          ms/op
OpsPerInvSanityTest.test:p1.00    sample               56,623          ms/op
OpsPerInvSanityTest.test:time     sample    5  5085508291,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 55,063 ms/op
                 ops:  1,000 #
                 time: 55146416,000 #

Iteration   2: 50,561 ms/op
                 ops:  1,000 #
                 time: 50591250,000 #

Iteration   3: 56,722 ms/op
                 ops:  1,000 #
                 time: 56749834,000 #

Iteration   4: 53,734 ms/op
                 ops:  1,000 #
                 time: 53744833,000 #

Iteration   5: 55,031 ms/op
                 ops:  1,000 #
                 time: 55053042,000 #



Result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test":
  N = 5
  mean =     54,222 ±(99.9%) 8,877 ms/op

  Histogram, ms/op:
    [50,000, 50,500) = 0 
    [50,500, 51,000) = 1 
    [51,000, 51,500) = 0 
    [51,500, 52,000) = 0 
    [52,000, 52,500) = 0 
    [52,500, 53,000) = 0 
    [53,000, 53,500) = 0 
    [53,500, 54,000) = 1 
    [54,000, 54,500) = 0 
    [54,500, 55,000) = 0 
    [55,000, 55,500) = 2 
    [55,500, 56,000) = 0 
    [56,000, 56,500) = 0 

  Percentiles, ms/op:
      p(0,0000) =     50,561 ms/op
     p(50,0000) =     55,031 ms/op
     p(90,0000) =     56,722 ms/op
     p(95,0000) =     56,722 ms/op
     p(99,0000) =     56,722 ms/op
     p(99,9000) =     56,722 ms/op
     p(99,9900) =     56,722 ms/op
     p(99,9990) =     56,722 ms/op
     p(99,9999) =     56,722 ms/op
    p(100,0000) =     56,722 ms/op

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:ops":
  5,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
  CI (99.9%): [5,000, 5,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:time":
  271285375,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (50591250,000, 54257075,000, 56749834,000), stdev = 2309707,942
  CI (99.9%): [271285375,000, 271285375,000] (assumes normal distribution)


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt          Score   Error  Units
OpsPerInvSanityTest.test         ss    5         54,222 ± 8,877  ms/op
OpsPerInvSanityTest.test:ops     ss    5          5,000              #
OpsPerInvSanityTest.test:time    ss    5  271285375,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 0,187 ops/ms
                 ops:  19,000 #
                 time: 1015845042,000 #

Iteration   2: 0,186 ops/ms
                 ops:  19,000 #
                 time: 1018928125,000 #

Iteration   3: 0,186 ops/ms
                 ops:  19,000 #
                 time: 1019802125,000 #

Iteration   4: 0,188 ops/ms
                 ops:  19,000 #
                 time: 1009610375,000 #

Iteration   5: 0,186 ops/ms
                 ops:  19,000 #
                 time: 1018908458,000 #



Result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test":
  0,187 ±(99.9%) 0,003 ops/ms [Average]
  (min, avg, max) = (0,186, 0,187, 0,188), stdev = 0,001
  CI (99.9%): [0,184, 0,190] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:ops":
  95,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,000, 19,000), stdev = 0,001
  CI (99.9%): [95,000, 95,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:time":
  5083094125,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1009610375,000, 1016618825,000, 1019802125,000), stdev = 4196003,938
  CI (99.9%): [5083094125,000, 5083094125,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt           Score   Error   Units
OpsPerInvSanityTest.test       thrpt    5           0,187 ± 0,003  ops/ms
OpsPerInvSanityTest.test:ops   thrpt    5          95,000               #
OpsPerInvSanityTest.test:time  thrpt    5  5083094125,000               #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 5,378 ms/op
                 ops:  19,000 #
                 time: 1021914541,000 #

Iteration   2: 5,334 ms/op
                 ops:  19,000 #
                 time: 1013416875,000 #

Iteration   3: 5,266 ms/op
                 ops:  20,000 #
                 time: 1053169042,000 #

Iteration   4: 5,241 ms/op
                 ops:  20,000 #
                 time: 1048198083,000 #

Iteration   5: 5,291 ms/op
                 ops:  19,000 #
                 time: 1005239584,000 #



Result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test":
  5,302 ±(99.9%) 0,210 ms/op [Average]
  (min, avg, max) = (5,241, 5,302, 5,378), stdev = 0,055
  CI (99.9%): [5,092, 5,512] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:ops":
  97,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,400, 20,000), stdev = 0,548
  CI (99.9%): [97,000, 97,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:time":
  5141938125,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1005239584,000, 1028387625,000, 1053169042,000), stdev = 21262812,895
  CI (99.9%): [5141938125,000, 5141938125,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt           Score   Error  Units
OpsPerInvSanityTest.test       avgt    5           5,302 ± 0,210  ms/op
OpsPerInvSanityTest.test:ops   avgt    5          97,000              #
OpsPerInvSanityTest.test:time  avgt    5  5141938125,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Sampling time
# Benchmark: org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 5,378 ±(99.9%) 0,144 ms/op
                 ops:     19,000 #
                 p0.00:   5,046 ms/op
                 p0.50:   5,448 ms/op
                 p0.90:   5,513 ms/op
                 p0.95:   5,595 ms/op
                 p0.99:   5,595 ms/op
                 p0.999:  5,595 ms/op
                 p0.9999: 5,595 ms/op
                 p1.00:   5,595 ms/op
                 time:    1024790209,000 #

Iteration   2: 5,400 ±(99.9%) 0,130 ms/op
                 ops:     19,000 #
                 p0.00:   5,046 ms/op
                 p0.50:   5,448 ms/op
                 p0.90:   5,521 ms/op
                 p0.95:   5,579 ms/op
                 p0.99:   5,579 ms/op
                 p0.999:  5,579 ms/op
                 p0.9999: 5,579 ms/op
                 p1.00:   5,579 ms/op
                 time:    1027265916,000 #

Iteration   3: 5,301 ±(99.9%) 0,127 ms/op
                 ops:     19,000 #
                 p0.00:   5,046 ms/op
                 p0.50:   5,308 ms/op
                 p0.90:   5,497 ms/op
                 p0.95:   5,521 ms/op
                 p0.99:   5,521 ms/op
                 p0.999:  5,521 ms/op
                 p0.9999: 5,521 ms/op
                 p1.00:   5,521 ms/op
                 time:    1008184542,000 #

Iteration   4: 5,348 ±(99.9%) 0,140 ms/op
                 ops:     19,000 #
                 p0.00:   5,022 ms/op
                 p0.50:   5,366 ms/op
                 p0.90:   5,497 ms/op
                 p0.95:   5,497 ms/op
                 p0.99:   5,497 ms/op
                 p0.999:  5,497 ms/op
                 p0.9999: 5,497 ms/op
                 p1.00:   5,497 ms/op
                 time:    1017162708,000 #

Iteration   5: 5,364 ±(99.9%) 0,134 ms/op
                 ops:     19,000 #
                 p0.00:   5,120 ms/op
                 p0.50:   5,399 ms/op
                 p0.90:   5,497 ms/op
                 p0.95:   5,620 ms/op
                 p0.99:   5,620 ms/op
                 p0.999:  5,620 ms/op
                 p0.9999: 5,620 ms/op
                 p1.00:   5,620 ms/op
                 time:    1020503708,000 #



Result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test":
  N = 95
  mean =      5,358 ±(99.9%) 0,053 ms/op

  Histogram, ms/op:
    [5,000, 5,050) = 4 
    [5,050, 5,100) = 0 
    [5,100, 5,150) = 7 
    [5,150, 5,200) = 11 
    [5,200, 5,250) = 2 
    [5,250, 5,300) = 6 
    [5,300, 5,350) = 14 
    [5,350, 5,400) = 6 
    [5,400, 5,450) = 8 
    [5,450, 5,500) = 29 
    [5,500, 5,550) = 5 
    [5,550, 5,600) = 2 
    [5,600, 5,650) = 1 
    [5,650, 5,700) = 0 

  Percentiles, ms/op:
      p(0,0000) =      5,022 ms/op
     p(50,0000) =      5,374 ms/op
     p(90,0000) =      5,497 ms/op
     p(95,0000) =      5,521 ms/op
     p(99,0000) =      5,620 ms/op
     p(99,9000) =      5,620 ms/op
     p(99,9900) =      5,620 ms/op
     p(99,9990) =      5,620 ms/op
     p(99,9999) =      5,620 ms/op
    p(100,0000) =      5,620 ms/op

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:ops":
  95,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,000, 19,000), stdev = 0,001
  CI (99.9%): [95,000, 95,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:time":
  5097907083,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1008184542,000, 1019581416,600, 1027265916,000), stdev = 7462783,875
  CI (99.9%): [5097907083,000, 5097907083,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt           Score   Error  Units
OpsPerInvSanityTest.test          sample   95           5,358 ± 0,053  ms/op
OpsPerInvSanityTest.test:ops      sample    5          95,000              #
OpsPerInvSanityTest.test:p0.00    sample                5,022          ms/op
OpsPerInvSanityTest.test:p0.50    sample                5,374          ms/op
OpsPerInvSanityTest.test:p0.90    sample                5,497          ms/op
OpsPerInvSanityTest.test:p0.95    sample                5,521          ms/op
OpsPerInvSanityTest.test:p0.99    sample                5,620          ms/op
OpsPerInvSanityTest.test:p0.999   sample                5,620          ms/op
OpsPerInvSanityTest.test:p0.9999  sample                5,620          ms/op
OpsPerInvSanityTest.test:p1.00    sample                5,620          ms/op
OpsPerInvSanityTest.test:time     sample    5  5097907083,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 5,505 ms/op
                 ops:  1,000 #
                 time: 55104833,000 #

Iteration   2: 5,363 ms/op
                 ops:  1,000 #
                 time: 53653375,000 #

Iteration   3: 5,224 ms/op
                 ops:  1,000 #
                 time: 52256791,000 #

Iteration   4: 5,503 ms/op
                 ops:  1,000 #
                 time: 55063000,000 #

Iteration   5: 5,514 ms/op
                 ops:  1,000 #
                 time: 55152375,000 #



Result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test":
  N = 5
  mean =      5,422 ±(99.9%) 0,490 ms/op

  Histogram, ms/op:
    [5,200, 5,225) = 1 
    [5,225, 5,250) = 0 
    [5,250, 5,275) = 0 
    [5,275, 5,300) = 0 
    [5,300, 5,325) = 0 
    [5,325, 5,350) = 0 
    [5,350, 5,375) = 1 
    [5,375, 5,400) = 0 
    [5,400, 5,425) = 0 
    [5,425, 5,450) = 0 
    [5,450, 5,475) = 0 
    [5,475, 5,500) = 0 
    [5,500, 5,525) = 3 
    [5,525, 5,550) = 0 
    [5,550, 5,575) = 0 
    [5,575, 5,600) = 0 

  Percentiles, ms/op:
      p(0,0000) =      5,224 ms/op
     p(50,0000) =      5,503 ms/op
     p(90,0000) =      5,514 ms/op
     p(95,0000) =      5,514 ms/op
     p(99,0000) =      5,514 ms/op
     p(99,9000) =      5,514 ms/op
     p(99,9900) =      5,514 ms/op
     p(99,9990) =      5,514 ms/op
     p(99,9999) =      5,514 ms/op
    p(100,0000) =      5,514 ms/op

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:ops":
  5,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
  CI (99.9%): [5,000, 5,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:time":
  271230374,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (52256791,000, 54246074,800, 55152375,000), stdev = 1278158,399
  CI (99.9%): [271230374,000, 271230374,000] (assumes normal distribution)


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt          Score   Error  Units
OpsPerInvSanityTest.test         ss    5          5,422 ± 0,490  ms/op
OpsPerInvSanityTest.test:ops     ss    5          5,000              #
OpsPerInvSanityTest.test:time    ss    5  271230374,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 1,865 ops/ms
                 ops:  19,000 #
                 time: 1018968250,000 #

Iteration   2: 1,864 ops/ms
                 ops:  19,000 #
                 time: 1019418209,000 #

Iteration   3: 1,850 ops/ms
                 ops:  19,000 #
                 time: 1026856083,000 #

Iteration   4: 1,870 ops/ms
                 ops:  19,000 #
                 time: 1016151375,000 #

Iteration   5: 1,847 ops/ms
                 ops:  19,000 #
                 time: 1028808208,000 #



Result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test":
  1,859 ±(99.9%) 0,038 ops/ms [Average]
  (min, avg, max) = (1,847, 1,859, 1,870), stdev = 0,010
  CI (99.9%): [1,821, 1,898] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:ops":
  95,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,000, 19,000), stdev = 0,001
  CI (99.9%): [95,000, 95,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:time":
  5110202125,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1016151375,000, 1022040425,000, 1028808208,000), stdev = 5476966,190
  CI (99.9%): [5110202125,000, 5110202125,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt           Score   Error   Units
OpsPerInvSanityTest.test       thrpt    5           1,859 ± 0,038  ops/ms
OpsPerInvSanityTest.test:ops   thrpt    5          95,000               #
OpsPerInvSanityTest.test:time  thrpt    5  5110202125,000               #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 0,536 ms/op
                 ops:  19,000 #
                 time: 1019288875,000 #

Iteration   2: 0,541 ms/op
                 ops:  19,000 #
                 time: 1028313292,000 #

Iteration   3: 0,533 ms/op
                 ops:  19,000 #
                 time: 1012490000,000 #

Iteration   4: 0,541 ms/op
                 ops:  19,000 #
                 time: 1027349292,000 #

Iteration   5: 0,540 ms/op
                 ops:  19,000 #
                 time: 1025638417,000 #



Result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test":
  0,538 ±(99.9%) 0,014 ms/op [Average]
  (min, avg, max) = (0,533, 0,538, 0,541), stdev = 0,004
  CI (99.9%): [0,525, 0,552] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:ops":
  95,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,000, 19,000), stdev = 0,001
  CI (99.9%): [95,000, 95,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:time":
  5113079876,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1012490000,000, 1022615975,200, 1028313292,000), stdev = 6663404,358
  CI (99.9%): [5113079876,000, 5113079876,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt           Score   Error  Units
OpsPerInvSanityTest.test       avgt    5           0,538 ± 0,014  ms/op
OpsPerInvSanityTest.test:ops   avgt    5          95,000              #
OpsPerInvSanityTest.test:time  avgt    5  5113079876,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, ***WARNING: Synchronize iterations are disabled!***
# Benchmark mode: Sampling time
# Benchmark: org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:05
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 0,526 ±(99.9%) 0,016 ms/op
                 ops:     19,000 #
                 p0.00:   0,506 ms/op
                 p0.50:   0,519 ms/op
                 p0.90:   0,555 ms/op
                 p0.95:   0,557 ms/op
                 p0.99:   0,557 ms/op
                 p0.999:  0,557 ms/op
                 p0.9999: 0,557 ms/op
                 p1.00:   0,557 ms/op
                 time:    1003078416,000 #

Iteration   2: 0,536 ±(99.9%) 0,015 ms/op
                 ops:     19,000 #
                 p0.00:   0,506 ms/op
                 p0.50:   0,542 ms/op
                 p0.90:   0,551 ms/op
                 p0.95:   0,557 ms/op
                 p0.99:   0,557 ms/op
                 p0.999:  0,557 ms/op
                 p0.9999: 0,557 ms/op
                 p1.00:   0,557 ms/op
                 time:    1019275666,000 #

Iteration   3: 0,528 ±(99.9%) 0,018 ms/op
                 ops:     19,000 #
                 p0.00:   0,502 ms/op
                 p0.50:   0,520 ms/op
                 p0.90:   0,550 ms/op
                 p0.95:   0,557 ms/op
                 p0.99:   0,557 ms/op
                 p0.999:  0,557 ms/op
                 p0.9999: 0,557 ms/op
                 p1.00:   0,557 ms/op
                 time:    1003214583,000 #

Iteration   4: 0,515 ±(99.9%) 0,012 ms/op
                 ops:     20,000 #
                 p0.00:   0,501 ms/op
                 p0.50:   0,508 ms/op
                 p0.90:   0,538 ms/op
                 p0.95:   0,540 ms/op
                 p0.99:   0,540 ms/op
                 p0.999:  0,540 ms/op
                 p0.9999: 0,540 ms/op
                 p1.00:   0,540 ms/op
                 time:    1030225833,000 #

Iteration   5: 0,522 ±(99.9%) 0,021 ms/op
                 ops:     20,000 #
                 p0.00:   0,500 ms/op
                 p0.50:   0,512 ms/op
                 p0.90:   0,565 ms/op
                 p0.95:   0,566 ms/op
                 p0.99:   0,566 ms/op
                 p0.999:  0,566 ms/op
                 p0.9999: 0,566 ms/op
                 p1.00:   0,566 ms/op
                 time:    1045133959,000 #



Result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test":
  N = 97
  mean =      0,525 ±(99.9%) 0,007 ms/op

  Histogram, ms/op:
    [0,500, 0,505) = 18 
    [0,505, 0,510) = 12 
    [0,510, 0,515) = 7 
    [0,515, 0,520) = 11 
    [0,520, 0,525) = 10 
    [0,525, 0,530) = 3 
    [0,530, 0,535) = 3 
    [0,535, 0,540) = 6 
    [0,540, 0,545) = 1 
    [0,545, 0,550) = 17 
    [0,550, 0,555) = 3 
    [0,555, 0,560) = 4 
    [0,560, 0,565) = 0 
    [0,565, 0,570) = 2 

  Percentiles, ms/op:
      p(0,0000) =      0,500 ms/op
     p(50,0000) =      0,520 ms/op
     p(90,0000) =      0,550 ms/op
     p(95,0000) =      0,557 ms/op
     p(99,0000) =      0,566 ms/op
     p(99,9000) =      0,566 ms/op
     p(99,9900) =      0,566 ms/op
     p(99,9990) =      0,566 ms/op
     p(99,9999) =      0,566 ms/op
    p(100,0000) =      0,566 ms/op

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:ops":
  97,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (19,000, 19,400, 20,000), stdev = 0,548
  CI (99.9%): [97,000, 97,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:time":
  5100928457,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1003078416,000, 1020185691,400, 1045133959,000), stdev = 18060495,825
  CI (99.9%): [5100928457,000, 5100928457,000] (assumes normal distribution)


# Run complete. Total time: 00:00:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt           Score   Error  Units
OpsPerInvSanityTest.test          sample   97           0,525 ± 0,007  ms/op
OpsPerInvSanityTest.test:ops      sample    5          97,000              #
OpsPerInvSanityTest.test:p0.00    sample                0,500          ms/op
OpsPerInvSanityTest.test:p0.50    sample                0,520          ms/op
OpsPerInvSanityTest.test:p0.90    sample                0,550          ms/op
OpsPerInvSanityTest.test:p0.95    sample                0,557          ms/op
OpsPerInvSanityTest.test:p0.99    sample                0,566          ms/op
OpsPerInvSanityTest.test:p0.999   sample                0,566          ms/op
OpsPerInvSanityTest.test:p0.9999  sample                0,566          ms/op
OpsPerInvSanityTest.test:p1.00    sample                0,566          ms/op
OpsPerInvSanityTest.test:time     sample    5  5100928457,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 0,551 ms/op
                 ops:  1,000 #
                 time: 55129042,000 #

Iteration   2: 0,536 ms/op
                 ops:  1,000 #
                 time: 53583541,000 #

Iteration   3: 0,550 ms/op
                 ops:  1,000 #
                 time: 55051917,000 #

Iteration   4: 0,511 ms/op
                 ops:  1,000 #
                 time: 51137334,000 #

Iteration   5: 0,549 ms/op
                 ops:  1,000 #
                 time: 54883000,000 #



Result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test":
  N = 5
  mean =      0,539 ±(99.9%) 0,065 ms/op

  Histogram, ms/op:
    [0,510, 0,515) = 1 
    [0,515, 0,520) = 0 
    [0,520, 0,525) = 0 
    [0,525, 0,530) = 0 
    [0,530, 0,535) = 0 
    [0,535, 0,540) = 1 
    [0,540, 0,545) = 0 
    [0,545, 0,550) = 1 
    [0,550, 0,555) = 2 
    [0,555, 0,560) = 0 

  Percentiles, ms/op:
      p(0,0000) =      0,511 ms/op
     p(50,0000) =      0,549 ms/op
     p(90,0000) =      0,551 ms/op
     p(95,0000) =      0,551 ms/op
     p(99,0000) =      0,551 ms/op
     p(99,9000) =      0,551 ms/op
     p(99,9900) =      0,551 ms/op
     p(99,9990) =      0,551 ms/op
     p(99,9999) =      0,551 ms/op
    p(100,0000) =      0,551 ms/op

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:ops":
  5,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
  CI (99.9%): [5,000, 5,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.batchsize.OpsPerInvSanityTest.test:time":
  269784834,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (51137334,000, 53956966,800, 55129042,000), stdev = 1697055,513
  CI (99.9%): [269784834,000, 269784834,000] (assumes normal distribution)


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt          Score   Error  Units
OpsPerInvSanityTest.test         ss    5          0,539 ± 0,065  ms/op
OpsPerInvSanityTest.test:ops     ss    5          5,000              #
OpsPerInvSanityTest.test:time    ss    5  269784834,000              #
