# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.StackProfilerTest.work

# Run progress: 0,00% complete, ETA 00:00:06
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 82,494 ops/s
# Warmup Iteration   2: 82,665 ops/s
# Warmup Iteration   3: 81,938 ops/s
Iteration   1: 82,261 ops/s
                 stack: <delayed till summary>

Iteration   2: 82,119 ops/s
                 stack: <delayed till summary>

Iteration   3: 83,661 ops/s
                 stack: <delayed till summary>



Result "org.openjdk.jmh.it.profilers.StackProfilerTest.work":
  82,680 ±(99.9%) 15,544 ops/s [Average]
  (min, avg, max) = (82,119, 82,680, 83,661), stdev = 0,852
  CI (99.9%): [67,136, 98,224] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.StackProfilerTest.work:stack":
Stack profiler:

....[Thread state distributions]....................................................................
 98,8%         TIMED_WAITING
  1,2%         RUNNABLE

....[Thread state: TIMED_WAITING]...................................................................
 98,8% 100,0% java.lang.Thread.sleep
              java.lang.Thread.sleep
              java.util.concurrent.TimeUnit.sleep
              org.openjdk.jmh.it.Fixtures.work
              org.openjdk.jmh.it.profilers.StackProfilerTest.somethingInTheMiddle
              org.openjdk.jmh.it.profilers.StackProfilerTest.work
              org.openjdk.jmh.it.profilers.jmh_generated.StackProfilerTest_work_jmhTest.work_thrpt_jmhStub
              org.openjdk.jmh.it.profilers.jmh_generated.StackProfilerTest_work_jmhTest.work_Throughput
              sun.reflect.NativeMethodAccessorImpl.invoke0
              sun.reflect.NativeMethodAccessorImpl.invoke


....[Thread state: RUNNABLE]........................................................................
  0,4%  33,3% java.lang.Thread.sleep
              java.lang.Thread.sleep
              java.util.concurrent.TimeUnit.sleep
              org.openjdk.jmh.it.Fixtures.work
              org.openjdk.jmh.it.profilers.StackProfilerTest.somethingInTheMiddle
              org.openjdk.jmh.it.profilers.StackProfilerTest.work
              org.openjdk.jmh.it.profilers.jmh_generated.StackProfilerTest_work_jmhTest.work_thrpt_jmhStub
              org.openjdk.jmh.it.profilers.jmh_generated.StackProfilerTest_work_jmhTest.work_Throughput
              sun.reflect.NativeMethodAccessorImpl.invoke0
              sun.reflect.NativeMethodAccessorImpl.invoke

  0,4%  33,3% java.lang.Object.hashCode
              java.util.concurrent.ConcurrentHashMap.putVal
              java.util.concurrent.ConcurrentHashMap.put
              org.openjdk.jmh.runner.BenchmarkHandler.getWorkerData
              org.openjdk.jmh.runner.BenchmarkHandler.access$300
              org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
              org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
              java.util.concurrent.FutureTask.run
              java.util.concurrent.Executors$RunnableAdapter.call
              java.util.concurrent.FutureTask.run

  0,4%  33,3% sun.misc.Unsafe.unpark
              java.util.concurrent.locks.LockSupport.unpark
              java.util.concurrent.locks.AbstractQueuedSynchronizer.unparkSuccessor
              java.util.concurrent.locks.AbstractQueuedSynchronizer.doReleaseShared
              java.util.concurrent.locks.AbstractQueuedSynchronizer.releaseShared
              java.util.concurrent.CountDownLatch.countDown
              org.openjdk.jmh.runner.InfraControlL2.announceWarmupReady
              org.openjdk.jmh.runner.InfraControl.announceWarmupReady
              org.openjdk.jmh.it.profilers.jmh_generated.StackProfilerTest_work_jmhTest.work_Throughput
              sun.reflect.NativeMethodAccessorImpl.invoke0




# Run complete. Total time: 00:00:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt   Score    Error  Units
StackProfilerTest.work        thrpt    3  82,680 ± 15,544  ops/s
StackProfilerTest.work:stack  thrpt          NaN             ---
