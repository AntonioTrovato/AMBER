# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.races.RaceGroupStateInvocationTest.T

# Run progress: 0,00% complete, ETA 00:00:15
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
The Dynamic Halt is NOT Active
Iteration   1: 330,662 ops/s
Iteration   2: 332,419 ops/s
Iteration   3: 329,062 ops/s
Iteration   4: 331,823 ops/s
Iteration   5: 332,599 ops/s

Result "org.openjdk.jmh.it.races.RaceGroupStateInvocationTest.T":
  331,313 ±(99.9%) 5,656 ops/s [Average]
  (min, avg, max) = (329,062, 331,313, 332,599), stdev = 1,469
  CI (99.9%): [325,657, 336,969] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.races.RaceGroupStateInvocationTest.T

# Run progress: 33,32% complete, ETA 00:00:10
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
The Dynamic Halt is NOT Active
Iteration   1: 0,012 ±(99.9%) 0,001 s/op
Iteration   2: 0,012 ±(99.9%) 0,001 s/op
Iteration   3: 0,012 ±(99.9%) 0,001 s/op
Iteration   4: 0,012 ±(99.9%) 0,001 s/op
Iteration   5: 0,012 ±(99.9%) 0,001 s/op

Result "org.openjdk.jmh.it.races.RaceGroupStateInvocationTest.T":
  0,012 ±(99.9%) 0,001 s/op [Average]
  (min, avg, max) = (0,012, 0,012, 0,012), stdev = 0,001
  CI (99.9%): [0,012, 0,012] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.openjdk.jmh.it.races.RaceGroupStateInvocationTest.T

# Run progress: 66,64% complete, ETA 00:00:05
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
The Dynamic Halt is NOT Active
Iteration   1: 0,012 ±(99.9%) 0,001 s/op
                 p0.00:   0,010 s/op
                 p0.50:   0,013 s/op
                 p0.90:   0,013 s/op
                 p0.95:   0,013 s/op
                 p0.99:   0,013 s/op
                 p0.999:  0,013 s/op
                 p0.9999: 0,013 s/op
                 p1.00:   0,013 s/op

Iteration   2: 0,012 ±(99.9%) 0,001 s/op
                 p0.00:   0,010 s/op
                 p0.50:   0,013 s/op
                 p0.90:   0,013 s/op
                 p0.95:   0,013 s/op
                 p0.99:   0,013 s/op
                 p0.999:  0,013 s/op
                 p0.9999: 0,013 s/op
                 p1.00:   0,013 s/op

Iteration   3: 0,012 ±(99.9%) 0,001 s/op
                 p0.00:   0,010 s/op
                 p0.50:   0,013 s/op
                 p0.90:   0,013 s/op
                 p0.95:   0,013 s/op
                 p0.99:   0,014 s/op
                 p0.999:  0,014 s/op
                 p0.9999: 0,014 s/op
                 p1.00:   0,014 s/op

Iteration   4: 0,012 ±(99.9%) 0,001 s/op
                 p0.00:   0,010 s/op
                 p0.50:   0,013 s/op
                 p0.90:   0,013 s/op
                 p0.95:   0,013 s/op
                 p0.99:   0,013 s/op
                 p0.999:  0,013 s/op
                 p0.9999: 0,013 s/op
                 p1.00:   0,013 s/op

Iteration   5: 0,012 ±(99.9%) 0,001 s/op
                 p0.00:   0,010 s/op
                 p0.50:   0,013 s/op
                 p0.90:   0,013 s/op
                 p0.95:   0,013 s/op
                 p0.99:   0,013 s/op
                 p0.999:  0,013 s/op
                 p0.9999: 0,013 s/op
                 p1.00:   0,013 s/op


Result "org.openjdk.jmh.it.races.RaceGroupStateInvocationTest.T":
  N = 1657
  mean =      0,012 ±(99.9%) 0,001 s/op

  Histogram, s/op:
    [0,010, 0,010) = 44 
    [0,010, 0,011) = 62 
    [0,011, 0,011) = 76 
    [0,011, 0,011) = 48 
    [0,011, 0,011) = 53 
    [0,011, 0,012) = 67 
    [0,012, 0,012) = 75 
    [0,012, 0,012) = 75 
    [0,012, 0,012) = 52 
    [0,012, 0,013) = 171 
    [0,013, 0,013) = 929 
    [0,013, 0,013) = 2 
    [0,013, 0,013) = 0 
    [0,013, 0,014) = 0 
    [0,014, 0,014) = 0 
    [0,014, 0,014) = 2 
    [0,014, 0,014) = 0 
    [0,014, 0,015) = 1 
    [0,015, 0,015) = 0 

  Percentiles, s/op:
      p(0,0000) =      0,010 s/op
     p(50,0000) =      0,013 s/op
     p(90,0000) =      0,013 s/op
     p(95,0000) =      0,013 s/op
     p(99,0000) =      0,013 s/op
     p(99,9000) =      0,014 s/op
     p(99,9900) =      0,014 s/op
     p(99,9990) =      0,014 s/op
     p(99,9999) =      0,014 s/op
    p(100,0000) =      0,014 s/op


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.it.races.RaceGroupStateInvocationTest.T

# Run progress: 99,97% complete, ETA 00:00:00
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
The Dynamic Halt is NOT Active
Iteration   1: 0,012 ±(99.9%) 0,001 s/op
Iteration   2: 0,011 ±(99.9%) 0,001 s/op
Iteration   3: 0,012 ±(99.9%) 0,001 s/op
Iteration   4: 0,012 ±(99.9%) 0,003 s/op
Iteration   5: 0,012 ±(99.9%) 0,003 s/op

Result "org.openjdk.jmh.it.races.RaceGroupStateInvocationTest.T":
  N = 5
  mean =      0,012 ±(99.9%) 0,003 s/op

  Histogram, s/op:
    [0,010, 0,010) = 0 
    [0,010, 0,011) = 0 
    [0,011, 0,011) = 0 
    [0,011, 0,011) = 1 
    [0,011, 0,011) = 0 
    [0,011, 0,012) = 0 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 2 
    [0,012, 0,013) = 2 
    [0,013, 0,013) = 0 
    [0,013, 0,013) = 0 

  Percentiles, s/op:
      p(0,0000) =      0,011 s/op
     p(50,0000) =      0,012 s/op
     p(90,0000) =      0,012 s/op
     p(95,0000) =      0,012 s/op
     p(99,0000) =      0,012 s/op
     p(99,9000) =      0,012 s/op
     p(99,9900) =      0,012 s/op
     p(99,9990) =      0,012 s/op
     p(99,9999) =      0,012 s/op
    p(100,0000) =      0,012 s/op


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode   Cnt    Score    Error  Units
RaceGroupStateInvocationTest.T           thrpt     5  331,313 ±  5,656  ops/s
RaceGroupStateInvocationTest.T            avgt     5    0,012 ±  0,001   s/op
RaceGroupStateInvocationTest.T          sample  1657    0,012 ±  0,001   s/op
RaceGroupStateInvocationTest.T:p0.00    sample          0,010            s/op
RaceGroupStateInvocationTest.T:p0.50    sample          0,013            s/op
RaceGroupStateInvocationTest.T:p0.90    sample          0,013            s/op
RaceGroupStateInvocationTest.T:p0.95    sample          0,013            s/op
RaceGroupStateInvocationTest.T:p0.99    sample          0,013            s/op
RaceGroupStateInvocationTest.T:p0.999   sample          0,014            s/op
RaceGroupStateInvocationTest.T:p0.9999  sample          0,014            s/op
RaceGroupStateInvocationTest.T:p1.00    sample          0,014            s/op
RaceGroupStateInvocationTest.T              ss     5    0,012 ±  0,003   s/op
