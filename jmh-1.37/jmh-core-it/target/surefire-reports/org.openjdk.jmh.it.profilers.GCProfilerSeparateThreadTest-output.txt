# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerSeparateThreadTest.separateAlloc

# Run progress: 0,00% complete, ETA 00:00:10
# Fork: 1 of 1
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
# Warmup Iteration   1: 3129,534 ops/s
# Warmup Iteration   2: 2277,492 ops/s
# Warmup Iteration   3: 3219,706 ops/s
# Warmup Iteration   4: 3547,618 ops/s
# Warmup Iteration   5: 3685,700 ops/s
Iteration   1: 4045,497 ops/s
                 gc.alloc.rate:      3855,241 MB/sec
                 gc.alloc.rate.norm: 1000019,136 B/op
                 gc.count:           90,000 counts
                 gc.time:            180,000 ms

Iteration   2: 7287,999 ops/s
                 gc.alloc.rate:      6946,739 MB/sec
                 gc.alloc.rate.norm: 1000017,779 B/op
                 gc.count:           163,000 counts
                 gc.time:            163,000 ms

Iteration   3: 6006,036 ops/s
                 gc.alloc.rate:      5713,100 MB/sec
                 gc.alloc.rate.norm: 1000018,205 B/op
                 gc.count:           133,000 counts
                 gc.time:            116,000 ms

Iteration   4: 4659,538 ops/s
                 gc.alloc.rate:      4442,519 MB/sec
                 gc.alloc.rate.norm: 1000018,786 B/op
                 gc.count:           104,000 counts
                 gc.time:            183,000 ms

Iteration   5: 6021,825 ops/s
                 gc.alloc.rate:      5741,813 MB/sec
                 gc.alloc.rate.norm: 1000018,154 B/op
                 gc.count:           135,000 counts
                 gc.time:            134,000 ms



Result "org.openjdk.jmh.it.profilers.GCProfilerSeparateThreadTest.separateAlloc":
  5604,179 ±(99.9%) 4905,984 ops/s [Average]
  (min, avg, max) = (4045,497, 5604,179, 7287,999), stdev = 1274,069
  CI (99.9%): [698,195, 10510,163] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerSeparateThreadTest.separateAlloc:gc.alloc.rate":
  5339,883 ±(99.9%) 4673,518 MB/sec [Average]
  (min, avg, max) = (3855,241, 5339,883, 6946,739), stdev = 1213,698
  CI (99.9%): [666,364, 10013,401] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerSeparateThreadTest.separateAlloc:gc.alloc.rate.norm":
  1000018,412 ±(99.9%) 2,087 B/op [Average]
  (min, avg, max) = (1000017,779, 1000018,412, 1000019,136), stdev = 0,542
  CI (99.9%): [1000016,325, 1000020,499] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerSeparateThreadTest.separateAlloc:gc.count":
  625,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (90,000, 125,000, 163,000), stdev = 28,609
  CI (99.9%): [625,000, 625,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerSeparateThreadTest.separateAlloc:gc.time":
  776,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (116,000, 155,200, 183,000), stdev = 29,304
  CI (99.9%): [776,000, 776,000] (assumes normal distribution)


# Run complete. Total time: 00:00:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error   Units
GCProfilerSeparateThreadTest.separateAlloc                     thrpt    5     5604,179 ± 4905,984   ops/s
GCProfilerSeparateThreadTest.separateAlloc:gc.alloc.rate       thrpt    5     5339,883 ± 4673,518  MB/sec
GCProfilerSeparateThreadTest.separateAlloc:gc.alloc.rate.norm  thrpt    5  1000018,412 ±    2,087    B/op
GCProfilerSeparateThreadTest.separateAlloc:gc.count            thrpt    5      625,000             counts
GCProfilerSeparateThreadTest.separateAlloc:gc.time             thrpt    5      776,000                 ms
Reported by profiler: 1000018.4120080884, target: 1000000
