# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 3 threads (1 group; 1x "test1", 2x "test2" in each group), will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.asymm.ExactThreadCountTest.test

# Run progress: 0,00% complete, ETA 00:00:01
# Fork: 1 of 1
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 251,938 ops/s
                 test1: 83,804 ops/s
                 test2: 168,134 ops/s

Iteration   2: 252,482 ops/s
                 test1: 83,477 ops/s
                 test2: 169,005 ops/s

Iteration   3: 249,475 ops/s
                 test1: 83,322 ops/s
                 test2: 166,153 ops/s

Iteration   4: 249,221 ops/s
                 test1: 81,162 ops/s
                 test2: 168,058 ops/s

Iteration   5: 246,576 ops/s
                 test1: 83,399 ops/s
                 test2: 163,177 ops/s



Result "org.openjdk.jmh.it.asymm.ExactThreadCountTest.test":
  249,938 ±(99.9%) 9,133 ops/s [Average]
  (min, avg, max) = (246,576, 249,938, 252,482), stdev = 2,372
  CI (99.9%): [240,806, 259,071] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.asymm.ExactThreadCountTest.test:test1":
  83,033 ±(99.9%) 4,088 ops/s [Average]
  (min, avg, max) = (81,162, 83,033, 83,804), stdev = 1,062
  CI (99.9%): [78,944, 87,121] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.asymm.ExactThreadCountTest.test:test2":
  166,906 ±(99.9%) 8,971 ops/s [Average]
  (min, avg, max) = (163,177, 166,906, 169,005), stdev = 2,330
  CI (99.9%): [157,934, 175,877] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 3 threads (1 group; 1x "test1", 2x "test2" in each group), will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.asymm.ExactThreadCountTest.test

# Run progress: 33,22% complete, ETA 00:00:01
# Fork: 1 of 1
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 0,012 ±(99.9%) 0,001 s/op
                 test1: 0,012 s/op
                 test2: 0,012 s/op

Iteration   2: 0,012 ±(99.9%) 0,004 s/op
                 test1: 0,012 s/op
                 test2: 0,012 s/op

Iteration   3: 0,012 ±(99.9%) 0,008 s/op
                 test1: 0,012 s/op
                 test2: 0,012 s/op

Iteration   4: 0,012 ±(99.9%) 0,009 s/op
                 test1: 0,011 s/op
                 test2: 0,012 s/op

Iteration   5: 0,012 ±(99.9%) 0,010 s/op
                 test1: 0,013 s/op
                 test2: 0,012 s/op



Result "org.openjdk.jmh.it.asymm.ExactThreadCountTest.test":
  0,012 ±(99.9%) 0,001 s/op [Average]
  (min, avg, max) = (0,012, 0,012, 0,012), stdev = 0,001
  CI (99.9%): [0,011, 0,013] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.asymm.ExactThreadCountTest.test:test1":
  0,012 ±(99.9%) 0,002 s/op [Average]
  (min, avg, max) = (0,011, 0,012, 0,013), stdev = 0,001
  CI (99.9%): [0,010, 0,014] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.asymm.ExactThreadCountTest.test:test2":
  0,012 ±(99.9%) 0,001 s/op [Average]
  (min, avg, max) = (0,012, 0,012, 0,012), stdev = 0,001
  CI (99.9%): [0,011, 0,013] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 3 threads (1 group; 1x "test1", 2x "test2" in each group), will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.openjdk.jmh.it.asymm.ExactThreadCountTest.test

# Run progress: 66,45% complete, ETA 00:00:00
# Fork: 1 of 1
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 0,012 ±(99.9%) 0,001 s/op
                 p0.00:         0,011 s/op
                 p0.50:         0,013 s/op
                 p0.90:         0,013 s/op
                 p0.95:         0,014 s/op
                 p0.99:         0,014 s/op
                 p0.999:        0,014 s/op
                 p0.9999:       0,014 s/op
                 p1.00:         0,014 s/op
                 test1:         0,013 ±(99.9%) 0,001 s/op
                 test1:p0.00:   0,012 s/op
                 test1:p0.50:   0,013 s/op
                 test1:p0.90:   0,014 s/op
                 test1:p0.95:   0,014 s/op
                 test1:p0.99:   0,014 s/op
                 test1:p0.999:  0,014 s/op
                 test1:p0.9999: 0,014 s/op
                 test1:p1.00:   0,014 s/op
                 test2:         0,012 ±(99.9%) 0,001 s/op
                 test2:p0.00:   0,011 s/op
                 test2:p0.50:   0,013 s/op
                 test2:p0.90:   0,013 s/op
                 test2:p0.95:   0,014 s/op
                 test2:p0.99:   0,014 s/op
                 test2:p0.999:  0,014 s/op
                 test2:p0.9999: 0,014 s/op
                 test2:p1.00:   0,014 s/op

Iteration   2: 0,012 ±(99.9%) 0,001 s/op
                 p0.00:         0,010 s/op
                 p0.50:         0,013 s/op
                 p0.90:         0,013 s/op
                 p0.95:         0,014 s/op
                 p0.99:         0,014 s/op
                 p0.999:        0,014 s/op
                 p0.9999:       0,014 s/op
                 p1.00:         0,014 s/op
                 test1:         0,013 ±(99.9%) 0,001 s/op
                 test1:p0.00:   0,012 s/op
                 test1:p0.50:   0,013 s/op
                 test1:p0.90:   0,014 s/op
                 test1:p0.95:   0,014 s/op
                 test1:p0.99:   0,014 s/op
                 test1:p0.999:  0,014 s/op
                 test1:p0.9999: 0,014 s/op
                 test1:p1.00:   0,014 s/op
                 test2:         0,012 ±(99.9%) 0,001 s/op
                 test2:p0.00:   0,010 s/op
                 test2:p0.50:   0,013 s/op
                 test2:p0.90:   0,013 s/op
                 test2:p0.95:   0,013 s/op
                 test2:p0.99:   0,013 s/op
                 test2:p0.999:  0,013 s/op
                 test2:p0.9999: 0,013 s/op
                 test2:p1.00:   0,013 s/op

Iteration   3: 0,012 ±(99.9%) 0,001 s/op
                 p0.00:         0,010 s/op
                 p0.50:         0,013 s/op
                 p0.90:         0,013 s/op
                 p0.95:         0,014 s/op
                 p0.99:         0,014 s/op
                 p0.999:        0,014 s/op
                 p0.9999:       0,014 s/op
                 p1.00:         0,014 s/op
                 test1:         0,012 ±(99.9%) 0,003 s/op
                 test1:p0.00:   0,010 s/op
                 test1:p0.50:   0,012 s/op
                 test1:p0.90:   0,014 s/op
                 test1:p0.95:   0,014 s/op
                 test1:p0.99:   0,014 s/op
                 test1:p0.999:  0,014 s/op
                 test1:p0.9999: 0,014 s/op
                 test1:p1.00:   0,014 s/op
                 test2:         0,012 ±(99.9%) 0,001 s/op
                 test2:p0.00:   0,011 s/op
                 test2:p0.50:   0,013 s/op
                 test2:p0.90:   0,013 s/op
                 test2:p0.95:   0,013 s/op
                 test2:p0.99:   0,013 s/op
                 test2:p0.999:  0,013 s/op
                 test2:p0.9999: 0,013 s/op
                 test2:p1.00:   0,013 s/op

Iteration   4: 0,012 ±(99.9%) 0,001 s/op
                 p0.00:         0,010 s/op
                 p0.50:         0,013 s/op
                 p0.90:         0,013 s/op
                 p0.95:         0,013 s/op
                 p0.99:         0,013 s/op
                 p0.999:        0,013 s/op
                 p0.9999:       0,013 s/op
                 p1.00:         0,013 s/op
                 test1:         0,012 ±(99.9%) 0,001 s/op
                 test1:p0.00:   0,010 s/op
                 test1:p0.50:   0,012 s/op
                 test1:p0.90:   0,013 s/op
                 test1:p0.95:   0,013 s/op
                 test1:p0.99:   0,013 s/op
                 test1:p0.999:  0,013 s/op
                 test1:p0.9999: 0,013 s/op
                 test1:p1.00:   0,013 s/op
                 test2:         0,012 ±(99.9%) 0,001 s/op
                 test2:p0.00:   0,010 s/op
                 test2:p0.50:   0,013 s/op
                 test2:p0.90:   0,013 s/op
                 test2:p0.95:   0,013 s/op
                 test2:p0.99:   0,013 s/op
                 test2:p0.999:  0,013 s/op
                 test2:p0.9999: 0,013 s/op
                 test2:p1.00:   0,013 s/op

Iteration   5: 0,013 ±(99.9%) 0,001 s/op
                 p0.00:         0,010 s/op
                 p0.50:         0,013 s/op
                 p0.90:         0,015 s/op
                 p0.95:         0,016 s/op
                 p0.99:         0,016 s/op
                 p0.999:        0,016 s/op
                 p0.9999:       0,016 s/op
                 p1.00:         0,016 s/op
                 test1:         0,013 ±(99.9%) 0,004 s/op
                 test1:p0.00:   0,010 s/op
                 test1:p0.50:   0,014 s/op
                 test1:p0.90:   0,015 s/op
                 test1:p0.95:   0,015 s/op
                 test1:p0.99:   0,015 s/op
                 test1:p0.999:  0,015 s/op
                 test1:p0.9999: 0,015 s/op
                 test1:p1.00:   0,015 s/op
                 test2:         0,013 ±(99.9%) 0,001 s/op
                 test2:p0.00:   0,011 s/op
                 test2:p0.50:   0,013 s/op
                 test2:p0.90:   0,015 s/op
                 test2:p0.95:   0,016 s/op
                 test2:p0.99:   0,016 s/op
                 test2:p0.999:  0,016 s/op
                 test2:p0.9999: 0,016 s/op
                 test2:p1.00:   0,016 s/op



Result "org.openjdk.jmh.it.asymm.ExactThreadCountTest.test":
  N = 122
  mean =      0,012 ±(99.9%) 0,001 s/op

  Histogram, s/op:
    [0,010, 0,011) = 8 
    [0,011, 0,011) = 5 
    [0,011, 0,012) = 9 
    [0,012, 0,012) = 9 
    [0,012, 0,013) = 12 
    [0,013, 0,013) = 59 
    [0,013, 0,014) = 5 
    [0,014, 0,014) = 6 
    [0,014, 0,015) = 6 
    [0,015, 0,015) = 0 
    [0,015, 0,016) = 2 

  Percentiles, s/op:
      p(0,0000) =      0,010 s/op
     p(50,0000) =      0,013 s/op
     p(90,0000) =      0,014 s/op
     p(95,0000) =      0,014 s/op
     p(99,0000) =      0,016 s/op
     p(99,9000) =      0,016 s/op
     p(99,9900) =      0,016 s/op
     p(99,9990) =      0,016 s/op
     p(99,9999) =      0,016 s/op
    p(100,0000) =      0,016 s/op

Secondary result "org.openjdk.jmh.it.asymm.ExactThreadCountTest.test:test1":
  N = 40
  mean =      0,012 ±(99.9%) 0,001 s/op

  Histogram, s/op:
    [0,010, 0,011) = 3 
    [0,011, 0,011) = 1 
    [0,011, 0,012) = 1 
    [0,012, 0,012) = 4 
    [0,012, 0,013) = 4 
    [0,013, 0,013) = 20 
    [0,013, 0,014) = 0 
    [0,014, 0,014) = 3 
    [0,014, 0,015) = 3 
    [0,015, 0,015) = 0 
    [0,015, 0,016) = 1 

  Percentiles, s/op:
      p(0,0000) =      0,010 s/op
     p(50,0000) =      0,013 s/op
     p(90,0000) =      0,014 s/op
     p(95,0000) =      0,014 s/op
     p(99,0000) =      0,015 s/op
     p(99,9000) =      0,015 s/op
     p(99,9900) =      0,015 s/op
     p(99,9990) =      0,015 s/op
     p(99,9999) =      0,015 s/op
    p(100,0000) =      0,015 s/op

Secondary result "org.openjdk.jmh.it.asymm.ExactThreadCountTest.test:test2":
  N = 82
  mean =      0,012 ±(99.9%) 0,001 s/op

  Histogram, s/op:
    [0,010, 0,011) = 5 
    [0,011, 0,011) = 4 
    [0,011, 0,012) = 8 
    [0,012, 0,012) = 5 
    [0,012, 0,013) = 8 
    [0,013, 0,013) = 39 
    [0,013, 0,014) = 5 
    [0,014, 0,014) = 3 
    [0,014, 0,015) = 3 
    [0,015, 0,015) = 0 
    [0,015, 0,016) = 1 

  Percentiles, s/op:
      p(0,0000) =      0,010 s/op
     p(50,0000) =      0,013 s/op
     p(90,0000) =      0,014 s/op
     p(95,0000) =      0,014 s/op
     p(99,0000) =      0,016 s/op
     p(99,9000) =      0,016 s/op
     p(99,9900) =      0,016 s/op
     p(99,9990) =      0,016 s/op
     p(99,9999) =      0,016 s/op
    p(100,0000) =      0,016 s/op


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 3 threads (1 group; 1x "test1", 2x "test2" in each group)
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.it.asymm.ExactThreadCountTest.test

# Run progress: 99,67% complete, ETA 00:00:00
# Fork: 1 of 1
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 0,011 ±(99.9%) 0,013 s/op
                 test1: 0,012 s/op
                 test2: 0,011 s/op

Iteration   2: 0,012 ±(99.9%) 0,016 s/op
                 test1: 0,013 s/op
                 test2: 0,012 s/op

Iteration   3: 0,012 ±(99.9%) 0,009 s/op
                 test1: 0,012 s/op
                 test2: 0,012 s/op

Iteration   4: 0,011 ±(99.9%) 0,018 s/op
                 test1: 0,011 s/op
                 test2: 0,012 s/op

Iteration   5: 0,012 ±(99.9%) 0,002 s/op
                 test1: 0,012 s/op
                 test2: 0,013 s/op



Result "org.openjdk.jmh.it.asymm.ExactThreadCountTest.test":
  N = 5
  mean =      0,012 ±(99.9%) 0,002 s/op

  Histogram, s/op:
    [0,011, 0,011) = 0 
    [0,011, 0,011) = 0 
    [0,011, 0,011) = 0 
    [0,011, 0,012) = 2 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 1 
    [0,012, 0,012) = 1 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 1 
    [0,012, 0,013) = 0 
    [0,013, 0,013) = 0 
    [0,013, 0,013) = 0 
    [0,013, 0,013) = 0 

  Percentiles, s/op:
      p(0,0000) =      0,011 s/op
     p(50,0000) =      0,012 s/op
     p(90,0000) =      0,012 s/op
     p(95,0000) =      0,012 s/op
     p(99,0000) =      0,012 s/op
     p(99,9000) =      0,012 s/op
     p(99,9900) =      0,012 s/op
     p(99,9990) =      0,012 s/op
     p(99,9999) =      0,012 s/op
    p(100,0000) =      0,012 s/op

Secondary result "org.openjdk.jmh.it.asymm.ExactThreadCountTest.test:test1":
  N = 5
  mean =      0,012 ±(99.9%) 0,003 s/op

  Histogram, s/op:
    [0,010, 0,010) = 0 
    [0,010, 0,011) = 0 
    [0,011, 0,011) = 0 
    [0,011, 0,011) = 1 
    [0,011, 0,011) = 0 
    [0,011, 0,012) = 0 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 1 
    [0,012, 0,013) = 2 
    [0,013, 0,013) = 1 
    [0,013, 0,013) = 0 

  Percentiles, s/op:
      p(0,0000) =      0,011 s/op
     p(50,0000) =      0,012 s/op
     p(90,0000) =      0,013 s/op
     p(95,0000) =      0,013 s/op
     p(99,0000) =      0,013 s/op
     p(99,9000) =      0,013 s/op
     p(99,9900) =      0,013 s/op
     p(99,9990) =      0,013 s/op
     p(99,9999) =      0,013 s/op
    p(100,0000) =      0,013 s/op

Secondary result "org.openjdk.jmh.it.asymm.ExactThreadCountTest.test:test2":
  N = 5
  mean =      0,012 ±(99.9%) 0,002 s/op

  Histogram, s/op:
    [0,011, 0,011) = 1 
    [0,011, 0,011) = 0 
    [0,011, 0,011) = 0 
    [0,011, 0,012) = 0 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 1 
    [0,012, 0,012) = 1 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 1 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 0 
    [0,012, 0,013) = 1 
    [0,013, 0,013) = 0 
    [0,013, 0,013) = 0 
    [0,013, 0,013) = 0 

  Percentiles, s/op:
      p(0,0000) =      0,011 s/op
     p(50,0000) =      0,012 s/op
     p(90,0000) =      0,013 s/op
     p(95,0000) =      0,013 s/op
     p(99,0000) =      0,013 s/op
     p(99,9000) =      0,013 s/op
     p(99,9900) =      0,013 s/op
     p(99,9990) =      0,013 s/op
     p(99,9999) =      0,013 s/op
    p(100,0000) =      0,013 s/op


# Run complete. Total time: 00:00:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt    Score    Error  Units
ExactThreadCountTest.test                 thrpt    5  249,938 ±  9,133  ops/s
ExactThreadCountTest.test:test1           thrpt    5   83,033 ±  4,088  ops/s
ExactThreadCountTest.test:test2           thrpt    5  166,906 ±  8,971  ops/s
ExactThreadCountTest.test                  avgt    5    0,012 ±  0,001   s/op
ExactThreadCountTest.test:test1            avgt    5    0,012 ±  0,002   s/op
ExactThreadCountTest.test:test2            avgt    5    0,012 ±  0,001   s/op
ExactThreadCountTest.test                sample  122    0,012 ±  0,001   s/op
ExactThreadCountTest.test:p0.00          sample         0,010            s/op
ExactThreadCountTest.test:p0.50          sample         0,013            s/op
ExactThreadCountTest.test:p0.90          sample         0,014            s/op
ExactThreadCountTest.test:p0.95          sample         0,014            s/op
ExactThreadCountTest.test:p0.99          sample         0,016            s/op
ExactThreadCountTest.test:p0.999         sample         0,016            s/op
ExactThreadCountTest.test:p0.9999        sample         0,016            s/op
ExactThreadCountTest.test:p1.00          sample         0,016            s/op
ExactThreadCountTest.test:test1          sample   40    0,012 ±  0,001   s/op
ExactThreadCountTest.test:test1:p0.00    sample         0,010            s/op
ExactThreadCountTest.test:test1:p0.50    sample         0,013            s/op
ExactThreadCountTest.test:test1:p0.90    sample         0,014            s/op
ExactThreadCountTest.test:test1:p0.95    sample         0,014            s/op
ExactThreadCountTest.test:test1:p0.99    sample         0,015            s/op
ExactThreadCountTest.test:test1:p0.999   sample         0,015            s/op
ExactThreadCountTest.test:test1:p0.9999  sample         0,015            s/op
ExactThreadCountTest.test:test1:p1.00    sample         0,015            s/op
ExactThreadCountTest.test:test2          sample   82    0,012 ±  0,001   s/op
ExactThreadCountTest.test:test2:p0.00    sample         0,010            s/op
ExactThreadCountTest.test:test2:p0.50    sample         0,013            s/op
ExactThreadCountTest.test:test2:p0.90    sample         0,014            s/op
ExactThreadCountTest.test:test2:p0.95    sample         0,014            s/op
ExactThreadCountTest.test:test2:p0.99    sample         0,016            s/op
ExactThreadCountTest.test:test2:p0.999   sample         0,016            s/op
ExactThreadCountTest.test:test2:p0.9999  sample         0,016            s/op
ExactThreadCountTest.test:test2:p1.00    sample         0,016            s/op
ExactThreadCountTest.test                    ss    5    0,012 ±  0,002   s/op
ExactThreadCountTest.test:test1              ss    5    0,012 ±  0,003   s/op
ExactThreadCountTest.test:test2              ss    5    0,012 ±  0,002   s/op
