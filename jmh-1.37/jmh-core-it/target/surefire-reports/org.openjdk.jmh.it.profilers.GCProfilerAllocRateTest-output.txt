# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate

# Run progress: 0,00% complete, ETA 00:00:10
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 5713092,227 ops/s
# Warmup Iteration   2: 6876823,534 ops/s
# Warmup Iteration   3: 7127944,621 ops/s
# Warmup Iteration   4: 7177052,100 ops/s
# Warmup Iteration   5: 7919805,321 ops/s
Iteration   1: 8270369,932 ops/s
                 gc.alloc.rate:                   0,014 MB/sec
                 gc.alloc.rate.norm:              0,002 B/op
                 gc.churn.PS_Eden_Space:          8048,366 MB/sec
                 gc.churn.PS_Eden_Space.norm:     1020,610 B/op
                 gc.churn.PS_Survivor_Space:      0,062 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,008 B/op
                 gc.count:                        96,000 counts
                 gc.time:                         144,000 ms

Iteration   2: 7594343,928 ops/s
                 gc.alloc.rate:                   0,014 MB/sec
                 gc.alloc.rate.norm:              0,002 B/op
                 gc.churn.PS_Eden_Space:          7366,003 MB/sec
                 gc.churn.PS_Eden_Space.norm:     1018,600 B/op
                 gc.churn.PS_Survivor_Space:      0,062 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 gc.count:                        88,000 counts
                 gc.time:                         182,000 ms

Iteration   3: 9079823,506 ops/s
                 gc.alloc.rate:                   0,014 MB/sec
                 gc.alloc.rate.norm:              0,002 B/op
                 gc.churn.PS_Eden_Space:          8802,650 MB/sec
                 gc.churn.PS_Eden_Space.norm:     1016,894 B/op
                 gc.churn.PS_Survivor_Space:      0,125 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 gc.count:                        105,000 counts
                 gc.time:                         90,000 ms

Iteration   4: 8447366,212 ops/s
                 gc.alloc.rate:                   0,014 MB/sec
                 gc.alloc.rate.norm:              0,002 B/op
                 gc.churn.PS_Eden_Space:          8196,915 MB/sec
                 gc.churn.PS_Eden_Space.norm:     1017,845 B/op
                 gc.churn.PS_Survivor_Space:      0,218 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,027 B/op
                 gc.count:                        98,000 counts
                 gc.time:                         96,000 ms

Iteration   5: 9093050,135 ops/s
                 gc.alloc.rate:                   0,014 MB/sec
                 gc.alloc.rate.norm:              0,002 B/op
                 gc.churn.PS_Eden_Space:          8773,194 MB/sec
                 gc.churn.PS_Eden_Space.norm:     1011,868 B/op
                 gc.churn.PS_Survivor_Space:      0,155 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,018 B/op
                 gc.count:                        105,000 counts
                 gc.time:                         71,000 ms



Result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate":
  8496990,743 ±(99.9%) 2407477,651 ops/s [Average]
  (min, avg, max) = (7594343,928, 8496990,743, 9093050,135), stdev = 625214,301
  CI (99.9%): [6089513,092, 10904468,393] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.alloc.rate":
  0,014 ±(99.9%) 0,001 MB/sec [Average]
  (min, avg, max) = (0,014, 0,014, 0,014), stdev = 0,001
  CI (99.9%): [0,013, 0,015] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.alloc.rate.norm":
  0,002 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (0,002, 0,002, 0,002), stdev = 0,001
  CI (99.9%): [0,001, 0,002] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.churn.PS_Eden_Space":
  8237,426 ±(99.9%) 2280,745 MB/sec [Average]
  (min, avg, max) = (7366,003, 8237,426, 8802,650), stdev = 592,302
  CI (99.9%): [5956,681, 10518,171] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.churn.PS_Eden_Space.norm":
  1017,163 ±(99.9%) 12,555 B/op [Average]
  (min, avg, max) = (1011,868, 1017,163, 1020,610), stdev = 3,260
  CI (99.9%): [1004,608, 1029,718] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.churn.PS_Survivor_Space":
  0,125 ±(99.9%) 0,254 MB/sec [Average]
  (min, avg, max) = (0,062, 0,125, 0,218), stdev = 0,066
  CI (99.9%): [≈ 0, 0,378] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.churn.PS_Survivor_Space.norm":
  0,015 ±(99.9%) 0,030 B/op [Average]
  (min, avg, max) = (0,008, 0,015, 0,027), stdev = 0,008
  CI (99.9%): [≈ 0, 0,045] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.count":
  492,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (88,000, 98,400, 105,000), stdev = 7,092
  CI (99.9%): [492,000, 492,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.time":
  583,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (71,000, 116,600, 182,000), stdev = 45,385
  CI (99.9%): [583,000, 583,000] (assumes normal distribution)


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score         Error   Units
GCProfilerAllocRateTest.allocate                                  thrpt    5  8496990,743 ± 2407477,651   ops/s
GCProfilerAllocRateTest.allocate:gc.alloc.rate                    thrpt    5        0,014 ±       0,001  MB/sec
GCProfilerAllocRateTest.allocate:gc.alloc.rate.norm               thrpt    5        0,002 ±       0,001    B/op
GCProfilerAllocRateTest.allocate:gc.churn.PS_Eden_Space           thrpt    5     8237,426 ±    2280,745  MB/sec
GCProfilerAllocRateTest.allocate:gc.churn.PS_Eden_Space.norm      thrpt    5     1017,163 ±      12,555    B/op
GCProfilerAllocRateTest.allocate:gc.churn.PS_Survivor_Space       thrpt    5        0,125 ±       0,254  MB/sec
GCProfilerAllocRateTest.allocate:gc.churn.PS_Survivor_Space.norm  thrpt    5        0,015 ±       0,030    B/op
GCProfilerAllocRateTest.allocate:gc.count                         thrpt    5      492,000                counts
GCProfilerAllocRateTest.allocate:gc.time                          thrpt    5      583,000                    ms
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate

# Run progress: 0,00% complete, ETA 00:00:10
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 9215205,319 ops/s
# Warmup Iteration   2: 6679215,701 ops/s
# Warmup Iteration   3: 9025951,137 ops/s
# Warmup Iteration   4: 8716861,512 ops/s
# Warmup Iteration   5: 7471437,176 ops/s
Iteration   1: 9335716,034 ops/s
                 gc.alloc.rate:      0,012 MB/sec
                 gc.alloc.rate.norm: 0,001 B/op
                 gc.count:           108,000 counts
                 gc.time:            68,000 ms

Iteration   2: 9246914,460 ops/s
                 gc.alloc.rate:      0,012 MB/sec
                 gc.alloc.rate.norm: 0,001 B/op
                 gc.count:           107,000 counts
                 gc.time:            72,000 ms

Iteration   3: 8719908,941 ops/s
                 gc.alloc.rate:      0,013 MB/sec
                 gc.alloc.rate.norm: 0,002 B/op
                 gc.count:           101,000 counts
                 gc.time:            93,000 ms

Iteration   4: 7405276,322 ops/s
                 gc.alloc.rate:      0,012 MB/sec
                 gc.alloc.rate.norm: 0,002 B/op
                 gc.count:           86,000 counts
                 gc.time:            134,000 ms

Iteration   5: 6660872,984 ops/s
                 gc.alloc.rate:      0,012 MB/sec
                 gc.alloc.rate.norm: 0,002 B/op
                 gc.count:           77,000 counts
                 gc.time:            120,000 ms



Result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate":
  8273737,748 ±(99.9%) 4568127,128 ops/s [Average]
  (min, avg, max) = (6660872,984, 8273737,748, 9335716,034), stdev = 1186328,108
  CI (99.9%): [3705610,620, 12841864,876] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.alloc.rate":
  0,012 ±(99.9%) 0,001 MB/sec [Average]
  (min, avg, max) = (0,012, 0,012, 0,013), stdev = 0,001
  CI (99.9%): [0,012, 0,013] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.alloc.rate.norm":
  0,002 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (0,001, 0,002, 0,002), stdev = 0,001
  CI (99.9%): [0,001, 0,002] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.count":
  479,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (77,000, 95,800, 108,000), stdev = 13,700
  CI (99.9%): [479,000, 479,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.time":
  487,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (68,000, 97,400, 134,000), stdev = 29,065
  CI (99.9%): [487,000, 487,000] (assumes normal distribution)


# Run complete. Total time: 00:00:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score         Error   Units
GCProfilerAllocRateTest.allocate                     thrpt    5  8273737,748 ± 4568127,128   ops/s
GCProfilerAllocRateTest.allocate:gc.alloc.rate       thrpt    5        0,012 ±       0,001  MB/sec
GCProfilerAllocRateTest.allocate:gc.alloc.rate.norm  thrpt    5        0,002 ±       0,001    B/op
GCProfilerAllocRateTest.allocate:gc.count            thrpt    5      479,000                counts
GCProfilerAllocRateTest.allocate:gc.time             thrpt    5      487,000                    ms
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate

# Run progress: 0,00% complete, ETA 00:00:10
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 7416815,829 ops/s
# Warmup Iteration   2: 6605536,156 ops/s
# Warmup Iteration   3: 9119033,302 ops/s
# Warmup Iteration   4: 9114380,668 ops/s
# Warmup Iteration   5: 9738050,154 ops/s
Iteration   1: 10223881,161 ops/s
                 gc.alloc.rate:      0,012 MB/sec
                 gc.alloc.rate.norm: 0,001 B/op
                 gc.count:           118,000 counts
                 gc.time:            51,000 ms

Iteration   2: 9409006,610 ops/s
                 gc.alloc.rate:      0,012 MB/sec
                 gc.alloc.rate.norm: 0,001 B/op
                 gc.count:           109,000 counts
                 gc.time:            69,000 ms

Iteration   3: 9898964,180 ops/s
                 gc.alloc.rate:      0,013 MB/sec
                 gc.alloc.rate.norm: 0,001 B/op
                 gc.count:           115,000 counts
                 gc.time:            51,000 ms

Iteration   4: 9235782,594 ops/s
                 gc.alloc.rate:      0,012 MB/sec
                 gc.alloc.rate.norm: 0,001 B/op
                 gc.count:           107,000 counts
                 gc.time:            63,000 ms

Iteration   5: 9154243,935 ops/s
                 gc.alloc.rate:      0,012 MB/sec
                 gc.alloc.rate.norm: 0,001 B/op
                 gc.count:           106,000 counts
                 gc.time:            63,000 ms



Result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate":
  9584375,696 ±(99.9%) 1770058,916 ops/s [Average]
  (min, avg, max) = (9154243,935, 9584375,696, 10223881,161), stdev = 459678,679
  CI (99.9%): [7814316,780, 11354434,611] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.alloc.rate":
  0,012 ±(99.9%) 0,001 MB/sec [Average]
  (min, avg, max) = (0,012, 0,012, 0,013), stdev = 0,001
  CI (99.9%): [0,012, 0,013] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.alloc.rate.norm":
  0,001 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
  CI (99.9%): [0,001, 0,002] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.count":
  555,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (106,000, 111,000, 118,000), stdev = 5,244
  CI (99.9%): [555,000, 555,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerAllocRateTest.allocate:gc.time":
  297,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (51,000, 59,400, 69,000), stdev = 8,050
  CI (99.9%): [297,000, 297,000] (assumes normal distribution)


# Run complete. Total time: 00:00:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score         Error   Units
GCProfilerAllocRateTest.allocate                     thrpt    5  9584375,696 ± 1770058,916   ops/s
GCProfilerAllocRateTest.allocate:gc.alloc.rate       thrpt    5        0,012 ±       0,001  MB/sec
GCProfilerAllocRateTest.allocate:gc.alloc.rate.norm  thrpt    5        0,001 ±       0,001    B/op
GCProfilerAllocRateTest.allocate:gc.count            thrpt    5      555,000                counts
GCProfilerAllocRateTest.allocate:gc.time             thrpt    5      297,000                    ms
