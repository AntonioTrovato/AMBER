# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default -Xms1g -Xmx1g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.SafepointsProfilerTest.allocate

# Run progress: 0,00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: SafepointsProfiler 
# Profilers consume stdout from target VM, use -v EXTRA to copy to console
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 5513,164 ops/s
# Warmup Iteration   2: 5004,411 ops/s
# Warmup Iteration   3: 4072,426 ops/s
Iteration   1: 3121,972 ops/s
Iteration   2: 3252,474 ops/s
Iteration   3: 2947,176 ops/s
# Processing profiler results: SafepointsProfiler 


Result "org.openjdk.jmh.it.profilers.SafepointsProfilerTest.allocate":
  3107,207 ±(99.9%) 2794,643 ops/s [Average]
  (min, avg, max) = (2947,176, 3107,207, 3252,474), stdev = 153,184
  CI (99.9%): [312,564, 5901,850] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.SafepointsProfilerTest.allocate:safepoints.interval":
  3050,000 ms

Secondary result "org.openjdk.jmh.it.profilers.SafepointsProfilerTest.allocate:safepoints.pause":
  228,431 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (0,447, 2,115, 20,611), stdev = 2,811
  CI (99.9%): [228,431, 228,431] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.SafepointsProfilerTest.allocate:safepoints.ttsp":
  3,156 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (0,008, 0,029, 1,415), stdev = 0,135
  CI (99.9%): [3,156, 3,156] (assumes normal distribution)


# Run complete. Total time: 00:00:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt     Score      Error  Units
SafepointsProfilerTest.allocate                           thrpt    3  3107,207 ± 2794,643  ops/s
SafepointsProfilerTest.allocate:safepoints.interval       thrpt       3050,000                ms
SafepointsProfilerTest.allocate:safepoints.pause          thrpt  108   228,431                ms
SafepointsProfilerTest.allocate:safepoints.pause.avg      thrpt          2,115                ms
SafepointsProfilerTest.allocate:safepoints.pause.count    thrpt        108,000                 #
SafepointsProfilerTest.allocate:safepoints.pause.p0.00    thrpt          0,447                ms
SafepointsProfilerTest.allocate:safepoints.pause.p0.50    thrpt          1,119                ms
SafepointsProfilerTest.allocate:safepoints.pause.p0.90    thrpt          4,492                ms
SafepointsProfilerTest.allocate:safepoints.pause.p0.95    thrpt          8,435                ms
SafepointsProfilerTest.allocate:safepoints.pause.p0.99    thrpt         19,881                ms
SafepointsProfilerTest.allocate:safepoints.pause.p0.999   thrpt         20,611                ms
SafepointsProfilerTest.allocate:safepoints.pause.p0.9999  thrpt         20,611                ms
SafepointsProfilerTest.allocate:safepoints.pause.p1.00    thrpt         20,611                ms
SafepointsProfilerTest.allocate:safepoints.ttsp           thrpt  108     3,156                ms
SafepointsProfilerTest.allocate:safepoints.ttsp.avg       thrpt          0,029                ms
SafepointsProfilerTest.allocate:safepoints.ttsp.count     thrpt        108,000                 #
SafepointsProfilerTest.allocate:safepoints.ttsp.p0.00     thrpt          0,008                ms
SafepointsProfilerTest.allocate:safepoints.ttsp.p0.50     thrpt          0,015                ms
SafepointsProfilerTest.allocate:safepoints.ttsp.p0.90     thrpt          0,021                ms
SafepointsProfilerTest.allocate:safepoints.ttsp.p0.95     thrpt          0,031                ms
SafepointsProfilerTest.allocate:safepoints.ttsp.p0.99     thrpt          1,296                ms
SafepointsProfilerTest.allocate:safepoints.ttsp.p0.999    thrpt          1,415                ms
SafepointsProfilerTest.allocate:safepoints.ttsp.p0.9999   thrpt          1,415                ms
SafepointsProfilerTest.allocate:safepoints.ttsp.p1.00     thrpt          1,415                ms
