# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 1 s each
# Measurement: 2 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject

# Run progress: 0,00% complete, ETA 00:00:10
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 5,013 ns/op
# Warmup Iteration   2: 7,022 ns/op
Iteration   1: 5,074 ns/op
                 gc.alloc.rate:                   0,007 MB/sec
                 gc.alloc.rate.norm:              ≈ 10⁻⁴ B/op
                 gc.churn.PS_Eden_Space:          3019,690 MB/sec
                 gc.churn.PS_Eden_Space.norm:     16,080 B/op
                 gc.churn.PS_Survivor_Space:      0,031 MB/sec
                 gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 gc.count:                        72,000 counts
                 gc.time:                         283,000 ms

Iteration   2: 3,457 ns/op
                 gc.alloc.rate:                   0,007 MB/sec
                 gc.alloc.rate.norm:              ≈ 10⁻⁵ B/op
                 gc.churn.PS_Eden_Space:          4404,537 MB/sec
                 gc.churn.PS_Eden_Space.norm:     15,968 B/op
                 gc.churn.PS_Survivor_Space:      0,016 MB/sec
                 gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 gc.count:                        105,000 counts
                 gc.time:                         107,000 ms



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject":
  4,265 ns/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.alloc.rate":
  0,007 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.churn.PS_Eden_Space":
  3712,114 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.churn.PS_Eden_Space.norm":
  16,024 B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.churn.PS_Survivor_Space":
  0,023 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.churn.PS_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.count":
  88,500 counts

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.time":
  195,000 ms


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 10 iterations, 10 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup

# Run progress: 59,36% complete, ETA 00:00:04
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 8,717 ns/op
                 gc.alloc.rate:      481,009 MB/sec
                 gc.alloc.rate.norm: 6,674 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 6,480 ns/op
                 gc.alloc.rate:      1,208 MB/sec
                 gc.alloc.rate.norm: 0,009 B/op
                 gc.count:           1,000 counts
                 gc.time:            1,000 ms

Iteration   3: 3,979 ns/op
                 gc.alloc.rate:               1,150 MB/sec
                 gc.alloc.rate.norm:          0,005 B/op
                 gc.churn.PS_Eden_Space:      5511,006 MB/sec
                 gc.churn.PS_Eden_Space.norm: 23,358 B/op
                 gc.count:                    ≈ 0 counts

Iteration   4: 4,156 ns/op
                 gc.alloc.rate:                   1,185 MB/sec
                 gc.alloc.rate.norm:              0,005 B/op
                 gc.churn.PS_Eden_Space:          5345,100 MB/sec
                 gc.churn.PS_Eden_Space.norm:     24,080 B/op
                 gc.churn.PS_Survivor_Space:      55,500 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,250 B/op
                 gc.count:                        1,000 counts
                 gc.time:                         2,000 ms

Iteration   5: 3,700 ns/op
                 gc.alloc.rate:                   1,104 MB/sec
                 gc.alloc.rate.norm:              0,004 B/op
                 gc.churn.PS_Eden_Space:          4977,607 MB/sec
                 gc.churn.PS_Eden_Space.norm:     19,664 B/op
                 gc.churn.PS_Survivor_Space:      0,002 MB/sec
                 gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁵ B/op
                 gc.count:                        1,000 counts
                 gc.time:                         1,000 ms

Iteration   6: 4,102 ns/op
                 gc.alloc.rate:                   1,087 MB/sec
                 gc.alloc.rate.norm:              0,005 B/op
                 gc.churn.PS_Eden_Space:          4901,007 MB/sec
                 gc.churn.PS_Eden_Space.norm:     21,673 B/op
                 gc.churn.PS_Survivor_Space:      2,391 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 gc.count:                        1,000 counts
                 gc.time:                         2,000 ms

Iteration   7: 3,137 ns/op
                 gc.alloc.rate:      1,255 MB/sec
                 gc.alloc.rate.norm: 0,004 B/op
                 gc.count:           ≈ 0 counts

Iteration   8: 3,426 ns/op
                 gc.alloc.rate:                   1,015 MB/sec
                 gc.alloc.rate.norm:              0,004 B/op
                 gc.churn.PS_Eden_Space:          4503,039 MB/sec
                 gc.churn.PS_Eden_Space.norm:     18,222 B/op
                 gc.churn.PS_Survivor_Space:      2,199 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 gc.count:                        1,000 counts
                 gc.time:                         1,000 ms

Iteration   9: 4,551 ns/op
                 gc.alloc.rate:               1,251 MB/sec
                 gc.alloc.rate.norm:          0,006 B/op
                 gc.churn.PS_Eden_Space:      5765,636 MB/sec
                 gc.churn.PS_Eden_Space.norm: 28,144 B/op
                 gc.count:                    1,000 counts
                 gc.time:                     1,000 ms

Iteration  10: 3,312 ns/op
                 gc.alloc.rate:      0,981 MB/sec
                 gc.alloc.rate.norm: 0,004 B/op
                 gc.count:           ≈ 0 counts



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup":
  4,556 ±(99.9%) 2,632 ns/op [Average]
  (min, avg, max) = (3,137, 4,556, 8,717), stdev = 1,741
  CI (99.9%): [1,924, 7,188] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate":
  49,124 ±(99.9%) 229,422 MB/sec [Average]
  (min, avg, max) = (0,981, 49,124, 481,009), stdev = 151,749
  CI (99.9%): [≈ 0, 278,547] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate.norm":
  0,672 ±(99.9%) 3,188 B/op [Average]
  (min, avg, max) = (0,004, 0,672, 6,674), stdev = 2,109
  CI (99.9%): [≈ 0, 3,860] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Eden_Space":
  3100,339 ±(99.9%) 4067,261 MB/sec [Average]
  (min, avg, max) = (≈ 0, 3100,339, 5765,636), stdev = 2690,241
  CI (99.9%): [≈ 0, 7167,601] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Eden_Space.norm":
  13,514 ±(99.9%) 18,027 B/op [Average]
  (min, avg, max) = (≈ 0, 13,514, 28,144), stdev = 11,924
  CI (99.9%): [≈ 0, 31,542] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Survivor_Space":
  6,009 ±(99.9%) 26,330 MB/sec [Average]
  (min, avg, max) = (≈ 0, 6,009, 55,500), stdev = 17,416
  CI (99.9%): [≈ 0, 32,339] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Survivor_Space.norm":
  0,027 ±(99.9%) 0,119 B/op [Average]
  (min, avg, max) = (≈ 0, 0,027, 0,250), stdev = 0,078
  CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.count":
  6,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,516
  CI (99.9%): [6,000, 6,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.time":
  8,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,789
  CI (99.9%): [8,000, 8,000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime

# Run progress: 60,35% complete, ETA 00:00:04
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 390,762 ±(99.9%) 1188,642 ns/op
# Warmup Iteration   2: 28,350 ±(99.9%) 11,006 ns/op
Iteration   1: 38,140 ±(99.9%) 18,649 ns/op
                 gc.alloc.rate:                   0,007 MB/sec
                 gc.alloc.rate.norm:              ≈ 10⁻⁴ B/op
                 gc.churn.PS_Eden_Space:          2305,037 MB/sec
                 gc.churn.PS_Eden_Space.norm:     16,074 B/op
                 gc.churn.PS_Survivor_Space:      0,140 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 gc.count:                        55,000 counts
                 gc.time:                         71,000 ms
                 p0.00:                           ≈ 0 ns/op
                 p0.50:                           41,000 ns/op
                 p0.90:                           42,000 ns/op
                 p0.95:                           42,000 ns/op
                 p0.99:                           83,000 ns/op
                 p0.999:                          208,000 ns/op
                 p0.9999:                         33211,302 ns/op
                 p1.00:                           389120,000 ns/op



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime":
  N = 73611
  mean =     38,140 ±(99.9%) 18,649 ns/op

  Histogram, ns/op:
    [     0,000,  25000,000) = 73603 
    [ 25000,000,  50000,000) = 2 
    [ 50000,000,  75000,000) = 5 
    [ 75000,000, 100000,000) = 0 
    [100000,000, 125000,000) = 0 
    [125000,000, 150000,000) = 0 
    [150000,000, 175000,000) = 0 
    [175000,000, 200000,000) = 0 
    [200000,000, 225000,000) = 0 
    [225000,000, 250000,000) = 0 
    [250000,000, 275000,000) = 0 
    [275000,000, 300000,000) = 0 
    [300000,000, 325000,000) = 0 
    [325000,000, 350000,000) = 0 
    [350000,000, 375000,000) = 0 

  Percentiles, ns/op:
      p(0,0000) =        ≈ 0 ns/op
     p(50,0000) =     41,000 ns/op
     p(90,0000) =     42,000 ns/op
     p(95,0000) =     42,000 ns/op
     p(99,0000) =     83,000 ns/op
     p(99,9000) =    208,000 ns/op
     p(99,9900) =  33211,302 ns/op
     p(99,9990) = 389120,000 ns/op
     p(99,9999) = 389120,000 ns/op
    p(100,0000) = 389120,000 ns/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate":
  0,007 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Eden_Space":
  2305,037 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Eden_Space.norm":
  16,074 B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Survivor_Space":
  0,140 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Survivor_Space.norm":
  0,001 B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.count":
  55,000 counts

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.time":
  71,000 ms


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot

# Run progress: 99,93% complete, ETA 00:00:00
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 9250,000 ns/op
# Warmup Iteration   2: 15166,000 ns/op
Iteration   1: 2958,000 ns/op
                 gc.alloc.rate:      29,457 MB/sec
                 gc.alloc.rate.norm: 12400,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 2833,000 ns/op
                 gc.alloc.rate:      6,471 MB/sec
                 gc.alloc.rate.norm: 12400,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 2125,000 ns/op
                 gc.alloc.rate:      20,609 MB/sec
                 gc.alloc.rate.norm: 12400,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   4: 4083,000 ns/op
                 gc.alloc.rate:      31,520 MB/sec
                 gc.alloc.rate.norm: 12080,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   5: 3125,000 ns/op
                 gc.alloc.rate:      11,223 MB/sec
                 gc.alloc.rate.norm: 12400,000 B/op
                 gc.count:           ≈ 0 counts



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot":
  N = 5
  mean =   3024,800 ±(99.9%) 2709,658 ns/op

  Histogram, ns/op:
    [2000,000, 2250,000) = 1 
    [2250,000, 2500,000) = 0 
    [2500,000, 2750,000) = 0 
    [2750,000, 3000,000) = 2 
    [3000,000, 3250,000) = 1 
    [3250,000, 3500,000) = 0 
    [3500,000, 3750,000) = 0 
    [3750,000, 4000,000) = 0 
    [4000,000, 4250,000) = 1 
    [4250,000, 4500,000) = 0 
    [4500,000, 4750,000) = 0 

  Percentiles, ns/op:
      p(0,0000) =   2125,000 ns/op
     p(50,0000) =   2958,000 ns/op
     p(90,0000) =   4083,000 ns/op
     p(95,0000) =   4083,000 ns/op
     p(99,0000) =   4083,000 ns/op
     p(99,9000) =   4083,000 ns/op
     p(99,9900) =   4083,000 ns/op
     p(99,9990) =   4083,000 ns/op
     p(99,9999) =   4083,000 ns/op
    p(100,0000) =   4083,000 ns/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate":
  19,856 ±(99.9%) 42,290 MB/sec [Average]
  (min, avg, max) = (6,471, 19,856, 31,520), stdev = 10,983
  CI (99.9%): [≈ 0, 62,146] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate.norm":
  12336,000 ±(99.9%) 551,059 B/op [Average]
  (min, avg, max) = (12080,000, 12336,000, 12400,000), stdev = 143,108
  CI (99.9%): [11784,941, 12887,059] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot:gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:00:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode    Cnt       Score      Error   Units
GCProfilerTest.allocateObject                                              avgt      2       4,265              ns/op
GCProfilerTest.allocateObject:gc.alloc.rate                                avgt      2       0,007             MB/sec
GCProfilerTest.allocateObject:gc.alloc.rate.norm                           avgt      2      ≈ 10⁻⁴               B/op
GCProfilerTest.allocateObject:gc.churn.PS_Eden_Space                       avgt      2    3712,114             MB/sec
GCProfilerTest.allocateObject:gc.churn.PS_Eden_Space.norm                  avgt      2      16,024               B/op
GCProfilerTest.allocateObject:gc.churn.PS_Survivor_Space                   avgt      2       0,023             MB/sec
GCProfilerTest.allocateObject:gc.churn.PS_Survivor_Space.norm              avgt      2      ≈ 10⁻⁴               B/op
GCProfilerTest.allocateObject:gc.count                                     avgt      2     177,000             counts
GCProfilerTest.allocateObject:gc.time                                      avgt      2     390,000                 ms
GCProfilerTest.allocateObjectNoWarmup                                      avgt     10       4,556 ±    2,632   ns/op
GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate                        avgt     10      49,124 ±  229,422  MB/sec
GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate.norm                   avgt     10       0,672 ±    3,188    B/op
GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Eden_Space               avgt     10    3100,339 ± 4067,261  MB/sec
GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Eden_Space.norm          avgt     10      13,514 ±   18,027    B/op
GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Survivor_Space           avgt     10       6,009 ±   26,330  MB/sec
GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Survivor_Space.norm      avgt     10       0,027 ±    0,119    B/op
GCProfilerTest.allocateObjectNoWarmup:gc.count                             avgt     10       6,000             counts
GCProfilerTest.allocateObjectNoWarmup:gc.time                              avgt     10       8,000                 ms
GCProfilerTest.allocateObjectSampleTime                                  sample  73611      38,140 ±   18,649   ns/op
GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate                    sample              0,007             MB/sec
GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate.norm               sample             ≈ 10⁻⁴               B/op
GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Eden_Space           sample           2305,037             MB/sec
GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Eden_Space.norm      sample             16,074               B/op
GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Survivor_Space       sample              0,140             MB/sec
GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Survivor_Space.norm  sample              0,001               B/op
GCProfilerTest.allocateObjectSampleTime:gc.count                         sample             55,000             counts
GCProfilerTest.allocateObjectSampleTime:gc.time                          sample             71,000                 ms
GCProfilerTest.allocateObjectSampleTime:p0.00                            sample                ≈ 0              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.50                            sample             41,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.90                            sample             42,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.95                            sample             42,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.99                            sample             83,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.999                           sample            208,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.9999                          sample          33211,302              ns/op
GCProfilerTest.allocateObjectSampleTime:p1.00                            sample         389120,000              ns/op
GCProfilerTest.allocateObjectSingleShot                                      ss      5    3024,800 ± 2709,658   ns/op
GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate                        ss      5      19,856 ±   42,290  MB/sec
GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate.norm                   ss      5   12336,000 ±  551,059    B/op
GCProfilerTest.allocateObjectSingleShot:gc.count                             ss      5         ≈ 0             counts
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 1 s each
# Measurement: 2 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject

# Run progress: 0,00% complete, ETA 00:00:10
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 4,114 ns/op
# Warmup Iteration   2: 3,904 ns/op
Iteration   1: 3,336 ns/op
                 gc.alloc.rate:      0,006 MB/sec
                 gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 gc.count:           110,000 counts
                 gc.time:            90,000 ms

Iteration   2: 3,342 ns/op
                 gc.alloc.rate:      0,006 MB/sec
                 gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 gc.count:           109,000 counts
                 gc.time:            70,000 ms



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject":
  3,339 ns/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.alloc.rate":
  0,006 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.count":
  109,500 counts

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.time":
  80,000 ms


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 10 iterations, 10 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup

# Run progress: 59,36% complete, ETA 00:00:04
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 7,247 ns/op
                 gc.alloc.rate:      546,863 MB/sec
                 gc.alloc.rate.norm: 5,537 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 6,277 ns/op
                 gc.alloc.rate:      1,110 MB/sec
                 gc.alloc.rate.norm: 0,008 B/op
                 gc.count:           1,000 counts
                 gc.time:            1,000 ms

Iteration   3: 3,683 ns/op
                 gc.alloc.rate:      0,928 MB/sec
                 gc.alloc.rate.norm: 0,004 B/op
                 gc.count:           ≈ 0 counts

Iteration   4: 3,759 ns/op
                 gc.alloc.rate:      1,071 MB/sec
                 gc.alloc.rate.norm: 0,004 B/op
                 gc.count:           1,000 counts
                 gc.time:            2,000 ms

Iteration   5: 4,510 ns/op
                 gc.alloc.rate:      1,112 MB/sec
                 gc.alloc.rate.norm: 0,005 B/op
                 gc.count:           1,000 counts
                 gc.time:            2,000 ms

Iteration   6: 3,432 ns/op
                 gc.alloc.rate:      0,966 MB/sec
                 gc.alloc.rate.norm: 0,004 B/op
                 gc.count:           1,000 counts
                 gc.time:            1,000 ms

Iteration   7: 3,586 ns/op
                 gc.alloc.rate:      1,036 MB/sec
                 gc.alloc.rate.norm: 0,004 B/op
                 gc.count:           ≈ 0 counts

Iteration   8: 3,636 ns/op
                 gc.alloc.rate:      0,937 MB/sec
                 gc.alloc.rate.norm: 0,004 B/op
                 gc.count:           1,000 counts
                 gc.time:            2,000 ms

Iteration   9: 3,360 ns/op
                 gc.alloc.rate:      0,906 MB/sec
                 gc.alloc.rate.norm: 0,003 B/op
                 gc.count:           1,000 counts
                 gc.time:            1,000 ms

Iteration  10: 4,405 ns/op
                 gc.alloc.rate:      1,095 MB/sec
                 gc.alloc.rate.norm: 0,005 B/op
                 gc.count:           1,000 counts
                 gc.time:            2,000 ms



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup":
  4,389 ±(99.9%) 2,005 ns/op [Average]
  (min, avg, max) = (3,360, 4,389, 7,247), stdev = 1,326
  CI (99.9%): [2,385, 6,394] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate":
  55,602 ±(99.9%) 260,964 MB/sec [Average]
  (min, avg, max) = (0,906, 55,602, 546,863), stdev = 172,611
  CI (99.9%): [≈ 0, 316,566] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate.norm":
  0,558 ±(99.9%) 2,645 B/op [Average]
  (min, avg, max) = (0,003, 0,558, 5,537), stdev = 1,749
  CI (99.9%): [≈ 0, 3,203] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.count":
  7,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (≈ 0, 0,700, 1,000), stdev = 0,483
  CI (99.9%): [7,000, 7,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.time":
  11,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (≈ 0, 1,100, 2,000), stdev = 0,876
  CI (99.9%): [11,000, 11,000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime

# Run progress: 60,35% complete, ETA 00:00:04
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 31,353 ±(99.9%) 7,236 ns/op
# Warmup Iteration   2: 25,415 ±(99.9%) 5,321 ns/op
Iteration   1: 27,584 ±(99.9%) 2,747 ns/op
                 gc.alloc.rate:      0,006 MB/sec
                 gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 gc.count:           53,000 counts
                 gc.time:            48,000 ms
                 p0.00:              ≈ 0 ns/op
                 p0.50:              41,000 ns/op
                 p0.90:              42,000 ns/op
                 p0.95:              42,000 ns/op
                 p0.99:              42,000 ns/op
                 p0.999:             167,000 ns/op
                 p0.9999:            9902,642 ns/op
                 p1.00:              48128,000 ns/op



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime":
  N = 70338
  mean =     27,584 ±(99.9%) 2,747 ns/op

  Histogram, ns/op:
    [    0,000,  5000,000) = 70330 
    [ 5000,000, 10000,000) = 2 
    [10000,000, 15000,000) = 4 
    [15000,000, 20000,000) = 1 
    [20000,000, 25000,000) = 0 
    [25000,000, 30000,000) = 0 
    [30000,000, 35000,000) = 0 
    [35000,000, 40000,000) = 0 
    [40000,000, 45000,000) = 0 

  Percentiles, ns/op:
      p(0,0000) =        ≈ 0 ns/op
     p(50,0000) =     41,000 ns/op
     p(90,0000) =     42,000 ns/op
     p(95,0000) =     42,000 ns/op
     p(99,0000) =     42,000 ns/op
     p(99,9000) =    167,000 ns/op
     p(99,9900) =   9902,642 ns/op
     p(99,9990) =  48128,000 ns/op
     p(99,9999) =  48128,000 ns/op
    p(100,0000) =  48128,000 ns/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate":
  0,006 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.count":
  53,000 counts

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.time":
  48,000 ms


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot

# Run progress: 99,93% complete, ETA 00:00:00
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 9916,000 ns/op
# Warmup Iteration   2: 45833,000 ns/op
Iteration   1: 1291,000 ns/op
                 gc.alloc.rate:      78,961 MB/sec
                 gc.alloc.rate.norm: 10560,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 1042,000 ns/op
                 gc.alloc.rate:      28,312 MB/sec
                 gc.alloc.rate.norm: 10560,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 1334,000 ns/op
                 gc.alloc.rate:      56,670 MB/sec
                 gc.alloc.rate.norm: 10560,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   4: 2833,000 ns/op
                 gc.alloc.rate:      50,166 MB/sec
                 gc.alloc.rate.norm: 10560,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   5: 1750,000 ns/op
                 gc.alloc.rate:      42,203 MB/sec
                 gc.alloc.rate.norm: 10560,000 B/op
                 gc.count:           ≈ 0 counts



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot":
  N = 5
  mean =   1650,000 ±(99.9%) 2728,182 ns/op

  Histogram, ns/op:
    [1000,000, 1125,000) = 1 
    [1125,000, 1250,000) = 0 
    [1250,000, 1375,000) = 2 
    [1375,000, 1500,000) = 0 
    [1500,000, 1625,000) = 0 
    [1625,000, 1750,000) = 0 
    [1750,000, 1875,000) = 1 
    [1875,000, 2000,000) = 0 
    [2000,000, 2125,000) = 0 
    [2125,000, 2250,000) = 0 
    [2250,000, 2375,000) = 0 
    [2375,000, 2500,000) = 0 
    [2500,000, 2625,000) = 0 
    [2625,000, 2750,000) = 0 
    [2750,000, 2875,000) = 1 

  Percentiles, ns/op:
      p(0,0000) =   1042,000 ns/op
     p(50,0000) =   1334,000 ns/op
     p(90,0000) =   2833,000 ns/op
     p(95,0000) =   2833,000 ns/op
     p(99,0000) =   2833,000 ns/op
     p(99,9000) =   2833,000 ns/op
     p(99,9900) =   2833,000 ns/op
     p(99,9990) =   2833,000 ns/op
     p(99,9999) =   2833,000 ns/op
    p(100,0000) =   2833,000 ns/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate":
  51,262 ±(99.9%) 72,204 MB/sec [Average]
  (min, avg, max) = (28,312, 51,262, 78,961), stdev = 18,751
  CI (99.9%): [≈ 0, 123,467] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate.norm":
  10560,000 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (10560,000, 10560,000, 10560,000), stdev = 0,001
  CI (99.9%): [10560,000, 10560,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot:gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:00:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode    Cnt      Score      Error   Units
GCProfilerTest.allocateObject                                 avgt      2      3,339              ns/op
GCProfilerTest.allocateObject:gc.alloc.rate                   avgt      2      0,006             MB/sec
GCProfilerTest.allocateObject:gc.alloc.rate.norm              avgt      2     ≈ 10⁻⁵               B/op
GCProfilerTest.allocateObject:gc.count                        avgt      2    219,000             counts
GCProfilerTest.allocateObject:gc.time                         avgt      2    160,000                 ms
GCProfilerTest.allocateObjectNoWarmup                         avgt     10      4,389 ±    2,005   ns/op
GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate           avgt     10     55,602 ±  260,964  MB/sec
GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate.norm      avgt     10      0,558 ±    2,645    B/op
GCProfilerTest.allocateObjectNoWarmup:gc.count                avgt     10      7,000             counts
GCProfilerTest.allocateObjectNoWarmup:gc.time                 avgt     10     11,000                 ms
GCProfilerTest.allocateObjectSampleTime                     sample  70338     27,584 ±    2,747   ns/op
GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate       sample             0,006             MB/sec
GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate.norm  sample            ≈ 10⁻⁴               B/op
GCProfilerTest.allocateObjectSampleTime:gc.count            sample            53,000             counts
GCProfilerTest.allocateObjectSampleTime:gc.time             sample            48,000                 ms
GCProfilerTest.allocateObjectSampleTime:p0.00               sample               ≈ 0              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.50               sample            41,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.90               sample            42,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.95               sample            42,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.99               sample            42,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.999              sample           167,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.9999             sample          9902,642              ns/op
GCProfilerTest.allocateObjectSampleTime:p1.00               sample         48128,000              ns/op
GCProfilerTest.allocateObjectSingleShot                         ss      5   1650,000 ± 2728,182   ns/op
GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate           ss      5     51,262 ±   72,204  MB/sec
GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate.norm      ss      5  10560,000 ±    0,001    B/op
GCProfilerTest.allocateObjectSingleShot:gc.count                ss      5        ≈ 0             counts
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 1 s each
# Measurement: 2 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject

# Run progress: 0,00% complete, ETA 00:00:10
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 4,047 ns/op
# Warmup Iteration   2: 3,936 ns/op
Iteration   1: 3,927 ns/op
                 gc.alloc.rate:                   0,007 MB/sec
                 gc.alloc.rate.norm:              ≈ 10⁻⁵ B/op
                 gc.churn.PS_Eden_Space:          3852,982 MB/sec
                 gc.churn.PS_Eden_Space.norm:     15,869 B/op
                 gc.churn.PS_Survivor_Space:      0,062 MB/sec
                 gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 gc.count:                        92,000 counts
                 gc.time:                         147,000 ms

Iteration   2: 4,494 ns/op
                 gc.alloc.rate:                   0,007 MB/sec
                 gc.alloc.rate.norm:              ≈ 10⁻⁴ B/op
                 gc.churn.PS_Eden_Space:          3434,551 MB/sec
                 gc.churn.PS_Eden_Space.norm:     16,197 B/op
                 gc.churn.PS_Survivor_Space:      0,093 MB/sec
                 gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 gc.count:                        82,000 counts
                 gc.time:                         148,000 ms



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject":
  4,211 ns/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.alloc.rate":
  0,007 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.churn.PS_Eden_Space":
  3643,766 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.churn.PS_Eden_Space.norm":
  16,033 B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.churn.PS_Survivor_Space":
  0,078 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.churn.PS_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.count":
  87,000 counts

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.time":
  147,500 ms


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 10 iterations, 10 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup

# Run progress: 59,36% complete, ETA 00:00:04
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 10,336 ns/op
                 gc.alloc.rate:      533,276 MB/sec
                 gc.alloc.rate.norm: 9,259 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 5,809 ns/op
                 gc.alloc.rate:      1,024 MB/sec
                 gc.alloc.rate.norm: 0,007 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 6,045 ns/op
                 gc.alloc.rate:               0,851 MB/sec
                 gc.alloc.rate.norm:          0,006 B/op
                 gc.churn.PS_Eden_Space:      3550,361 MB/sec
                 gc.churn.PS_Eden_Space.norm: 23,847 B/op
                 gc.count:                    1,000 counts
                 gc.time:                     2,000 ms

Iteration   4: 5,566 ns/op
                 gc.alloc.rate:                   1,005 MB/sec
                 gc.alloc.rate.norm:              0,006 B/op
                 gc.churn.PS_Eden_Space:          4533,314 MB/sec
                 gc.churn.PS_Eden_Space.norm:     27,208 B/op
                 gc.churn.PS_Survivor_Space:      47,237 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,284 B/op
                 gc.count:                        1,000 counts
                 gc.time:                         2,000 ms

Iteration   5: 5,572 ns/op
                 gc.alloc.rate:                   0,835 MB/sec
                 gc.alloc.rate.norm:              0,005 B/op
                 gc.churn.PS_Eden_Space:          3765,315 MB/sec
                 gc.churn.PS_Eden_Space.norm:     22,215 B/op
                 gc.churn.PS_Survivor_Space:      3,677 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,022 B/op
                 gc.count:                        1,000 counts
                 gc.time:                         5,000 ms

Iteration   6: 3,442 ns/op
                 gc.alloc.rate:      1,001 MB/sec
                 gc.alloc.rate.norm: 0,004 B/op
                 gc.count:           ≈ 0 counts

Iteration   7: 4,579 ns/op
                 gc.alloc.rate:               1,098 MB/sec
                 gc.alloc.rate.norm:          0,005 B/op
                 gc.churn.PS_Eden_Space:      4951,213 MB/sec
                 gc.churn.PS_Eden_Space.norm: 24,407 B/op
                 gc.count:                    1,000 counts
                 gc.time:                     1,000 ms

Iteration   8: 4,540 ns/op
                 gc.alloc.rate:                   1,089 MB/sec
                 gc.alloc.rate.norm:              0,005 B/op
                 gc.churn.PS_Eden_Space:          4831,419 MB/sec
                 gc.churn.PS_Eden_Space.norm:     23,992 B/op
                 gc.churn.PS_Survivor_Space:      2,359 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 gc.count:                        1,000 counts
                 gc.time:                         2,000 ms

Iteration   9: 4,242 ns/op
                 gc.alloc.rate:                   0,998 MB/sec
                 gc.alloc.rate.norm:              0,005 B/op
                 gc.churn.PS_Eden_Space:          4500,413 MB/sec
                 gc.churn.PS_Eden_Space.norm:     22,375 B/op
                 gc.churn.PS_Survivor_Space:      2,195 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 gc.count:                        1,000 counts
                 gc.time:                         2,000 ms

Iteration  10: 5,417 ns/op
                 gc.alloc.rate:      0,948 MB/sec
                 gc.alloc.rate.norm: 0,006 B/op
                 gc.count:           ≈ 0 counts



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup":
  5,555 ±(99.9%) 2,822 ns/op [Average]
  (min, avg, max) = (3,442, 5,555, 10,336), stdev = 1,866
  CI (99.9%): [2,733, 8,376] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate":
  54,212 ±(99.9%) 254,484 MB/sec [Average]
  (min, avg, max) = (0,835, 54,212, 533,276), stdev = 168,326
  CI (99.9%): [≈ 0, 308,697] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate.norm":
  0,931 ±(99.9%) 4,424 B/op [Average]
  (min, avg, max) = (0,004, 0,931, 9,259), stdev = 2,926
  CI (99.9%): [≈ 0, 5,355] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Eden_Space":
  2613,204 ±(99.9%) 3460,657 MB/sec [Average]
  (min, avg, max) = (≈ 0, 2613,204, 4951,213), stdev = 2289,010
  CI (99.9%): [≈ 0, 6073,860] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Eden_Space.norm":
  14,404 ±(99.9%) 18,853 B/op [Average]
  (min, avg, max) = (≈ 0, 14,404, 27,208), stdev = 12,470
  CI (99.9%): [≈ 0, 33,257] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Survivor_Space":
  5,547 ±(99.9%) 22,240 MB/sec [Average]
  (min, avg, max) = (≈ 0, 5,547, 47,237), stdev = 14,710
  CI (99.9%): [≈ 0, 27,787] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Survivor_Space.norm":
  0,033 ±(99.9%) 0,134 B/op [Average]
  (min, avg, max) = (≈ 0, 0,033, 0,284), stdev = 0,088
  CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.count":
  6,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,516
  CI (99.9%): [6,000, 6,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.time":
  14,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (≈ 0, 1,400, 5,000), stdev = 1,578
  CI (99.9%): [14,000, 14,000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime

# Run progress: 60,35% complete, ETA 00:00:04
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 36,994 ±(99.9%) 3,732 ns/op
# Warmup Iteration   2: 32,555 ±(99.9%) 14,097 ns/op
Iteration   1: 36,919 ±(99.9%) 35,292 ns/op
                 gc.alloc.rate:                   0,007 MB/sec
                 gc.alloc.rate.norm:              ≈ 10⁻⁴ B/op
                 gc.churn.PS_Eden_Space:          2596,223 MB/sec
                 gc.churn.PS_Eden_Space.norm:     16,207 B/op
                 gc.churn.PS_Survivor_Space:      0,093 MB/sec
                 gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 gc.count:                        62,000 counts
                 gc.time:                         30,000 ms
                 p0.00:                           ≈ 0 ns/op
                 p0.50:                           41,000 ns/op
                 p0.90:                           42,000 ns/op
                 p0.95:                           42,000 ns/op
                 p0.99:                           42,000 ns/op
                 p0.999:                          208,000 ns/op
                 p0.9999:                         14103,059 ns/op
                 p1.00:                           439808,000 ns/op



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime":
  N = 41147
  mean =     36,919 ±(99.9%) 35,292 ns/op

  Histogram, ns/op:
    [     0,000,  50000,000) = 41146 
    [ 50000,000, 100000,000) = 0 
    [100000,000, 150000,000) = 0 
    [150000,000, 200000,000) = 0 
    [200000,000, 250000,000) = 0 
    [250000,000, 300000,000) = 0 
    [300000,000, 350000,000) = 0 
    [350000,000, 400000,000) = 0 
    [400000,000, 450000,000) = 1 

  Percentiles, ns/op:
      p(0,0000) =        ≈ 0 ns/op
     p(50,0000) =     41,000 ns/op
     p(90,0000) =     42,000 ns/op
     p(95,0000) =     42,000 ns/op
     p(99,0000) =     42,000 ns/op
     p(99,9000) =    208,000 ns/op
     p(99,9900) =  14103,059 ns/op
     p(99,9990) = 439808,000 ns/op
     p(99,9999) = 439808,000 ns/op
    p(100,0000) = 439808,000 ns/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate":
  0,007 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Eden_Space":
  2596,223 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Eden_Space.norm":
  16,207 B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Survivor_Space":
  0,093 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Survivor_Space.norm":
  0,001 B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.count":
  62,000 counts

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.time":
  30,000 ms


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot

# Run progress: 99,93% complete, ETA 00:00:00
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 23167,000 ns/op
# Warmup Iteration   2: 1833,000 ns/op
Iteration   1: 2333,000 ns/op
                 gc.alloc.rate:      38,709 MB/sec
                 gc.alloc.rate.norm: 12400,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 1292,000 ns/op
                 gc.alloc.rate:      65,896 MB/sec
                 gc.alloc.rate.norm: 12400,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 1292,000 ns/op
                 gc.alloc.rate:      61,339 MB/sec
                 gc.alloc.rate.norm: 12400,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   4: 3750,000 ns/op
                 gc.alloc.rate:      26,925 MB/sec
                 gc.alloc.rate.norm: 12400,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   5: 1041,000 ns/op
                 gc.alloc.rate:      80,355 MB/sec
                 gc.alloc.rate.norm: 12400,000 B/op
                 gc.count:           ≈ 0 counts



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot":
  N = 5
  mean =   1941,600 ±(99.9%) 4338,834 ns/op

  Histogram, ns/op:
    [1000,000, 1250,000) = 1 
    [1250,000, 1500,000) = 2 
    [1500,000, 1750,000) = 0 
    [1750,000, 2000,000) = 0 
    [2000,000, 2250,000) = 0 
    [2250,000, 2500,000) = 1 
    [2500,000, 2750,000) = 0 
    [2750,000, 3000,000) = 0 
    [3000,000, 3250,000) = 0 
    [3250,000, 3500,000) = 0 
    [3500,000, 3750,000) = 0 

  Percentiles, ns/op:
      p(0,0000) =   1041,000 ns/op
     p(50,0000) =   1292,000 ns/op
     p(90,0000) =   3750,000 ns/op
     p(95,0000) =   3750,000 ns/op
     p(99,0000) =   3750,000 ns/op
     p(99,9000) =   3750,000 ns/op
     p(99,9900) =   3750,000 ns/op
     p(99,9990) =   3750,000 ns/op
     p(99,9999) =   3750,000 ns/op
    p(100,0000) =   3750,000 ns/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate":
  54,645 ±(99.9%) 82,918 MB/sec [Average]
  (min, avg, max) = (26,925, 54,645, 80,355), stdev = 21,533
  CI (99.9%): [≈ 0, 137,562] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate.norm":
  12400,000 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (12400,000, 12400,000, 12400,000), stdev = 0,001
  CI (99.9%): [12400,000, 12400,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot:gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:00:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode    Cnt       Score      Error   Units
GCProfilerTest.allocateObject                                              avgt      2       4,211              ns/op
GCProfilerTest.allocateObject:gc.alloc.rate                                avgt      2       0,007             MB/sec
GCProfilerTest.allocateObject:gc.alloc.rate.norm                           avgt      2      ≈ 10⁻⁵               B/op
GCProfilerTest.allocateObject:gc.churn.PS_Eden_Space                       avgt      2    3643,766             MB/sec
GCProfilerTest.allocateObject:gc.churn.PS_Eden_Space.norm                  avgt      2      16,033               B/op
GCProfilerTest.allocateObject:gc.churn.PS_Survivor_Space                   avgt      2       0,078             MB/sec
GCProfilerTest.allocateObject:gc.churn.PS_Survivor_Space.norm              avgt      2      ≈ 10⁻³               B/op
GCProfilerTest.allocateObject:gc.count                                     avgt      2     174,000             counts
GCProfilerTest.allocateObject:gc.time                                      avgt      2     295,000                 ms
GCProfilerTest.allocateObjectNoWarmup                                      avgt     10       5,555 ±    2,822   ns/op
GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate                        avgt     10      54,212 ±  254,484  MB/sec
GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate.norm                   avgt     10       0,931 ±    4,424    B/op
GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Eden_Space               avgt     10    2613,204 ± 3460,657  MB/sec
GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Eden_Space.norm          avgt     10      14,404 ±   18,853    B/op
GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Survivor_Space           avgt     10       5,547 ±   22,240  MB/sec
GCProfilerTest.allocateObjectNoWarmup:gc.churn.PS_Survivor_Space.norm      avgt     10       0,033 ±    0,134    B/op
GCProfilerTest.allocateObjectNoWarmup:gc.count                             avgt     10       6,000             counts
GCProfilerTest.allocateObjectNoWarmup:gc.time                              avgt     10      14,000                 ms
GCProfilerTest.allocateObjectSampleTime                                  sample  41147      36,919 ±   35,292   ns/op
GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate                    sample              0,007             MB/sec
GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate.norm               sample             ≈ 10⁻⁴               B/op
GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Eden_Space           sample           2596,223             MB/sec
GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Eden_Space.norm      sample             16,207               B/op
GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Survivor_Space       sample              0,093             MB/sec
GCProfilerTest.allocateObjectSampleTime:gc.churn.PS_Survivor_Space.norm  sample              0,001               B/op
GCProfilerTest.allocateObjectSampleTime:gc.count                         sample             62,000             counts
GCProfilerTest.allocateObjectSampleTime:gc.time                          sample             30,000                 ms
GCProfilerTest.allocateObjectSampleTime:p0.00                            sample                ≈ 0              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.50                            sample             41,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.90                            sample             42,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.95                            sample             42,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.99                            sample             42,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.999                           sample            208,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.9999                          sample          14103,059              ns/op
GCProfilerTest.allocateObjectSampleTime:p1.00                            sample         439808,000              ns/op
GCProfilerTest.allocateObjectSingleShot                                      ss      5    1941,600 ± 4338,834   ns/op
GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate                        ss      5      54,645 ±   82,918  MB/sec
GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate.norm                   ss      5   12400,000 ±    0,001    B/op
GCProfilerTest.allocateObjectSingleShot:gc.count                             ss      5         ≈ 0             counts
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 1 s each
# Measurement: 2 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject

# Run progress: 0,00% complete, ETA 00:00:10
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 4,107 ns/op
# Warmup Iteration   2: 3,847 ns/op
Iteration   1: 3,478 ns/op
                 gc.alloc.rate:      0,006 MB/sec
                 gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 gc.count:           105,000 counts
                 gc.time:            80,000 ms

Iteration   2: 3,704 ns/op
                 gc.alloc.rate:      0,006 MB/sec
                 gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 gc.count:           98,000 counts
                 gc.time:            137,000 ms



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject":
  3,591 ns/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.alloc.rate":
  0,006 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.count":
  101,500 counts

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObject:gc.time":
  108,500 ms


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 10 iterations, 10 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup

# Run progress: 59,36% complete, ETA 00:00:04
# Fork: 1 of 1
The Dynamic Halt is NOT Active
Iteration   1: 7,144 ns/op
                 gc.alloc.rate:      469,393 MB/sec
                 gc.alloc.rate.norm: 4,825 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 6,915 ns/op
                 gc.alloc.rate:      0,630 MB/sec
                 gc.alloc.rate.norm: 0,005 B/op
                 gc.count:           1,000 counts
                 gc.time:            3,000 ms

Iteration   3: 6,179 ns/op
                 gc.alloc.rate:      0,771 MB/sec
                 gc.alloc.rate.norm: 0,005 B/op
                 gc.count:           1,000 counts
                 gc.time:            7,000 ms

Iteration   4: 4,046 ns/op
                 gc.alloc.rate:      0,730 MB/sec
                 gc.alloc.rate.norm: 0,003 B/op
                 gc.count:           1,000 counts
                 gc.time:            2,000 ms

Iteration   5: 3,386 ns/op
                 gc.alloc.rate:      0,838 MB/sec
                 gc.alloc.rate.norm: 0,003 B/op
                 gc.count:           1,000 counts
                 gc.time:            2,000 ms

Iteration   6: 3,400 ns/op
                 gc.alloc.rate:      0,952 MB/sec
                 gc.alloc.rate.norm: 0,003 B/op
                 gc.count:           ≈ 0 counts

Iteration   7: 3,674 ns/op
                 gc.alloc.rate:      1,116 MB/sec
                 gc.alloc.rate.norm: 0,004 B/op
                 gc.count:           1,000 counts
                 gc.time:            1,000 ms

Iteration   8: 4,591 ns/op
                 gc.alloc.rate:      0,978 MB/sec
                 gc.alloc.rate.norm: 0,005 B/op
                 gc.count:           1,000 counts
                 gc.time:            2,000 ms

Iteration   9: 3,852 ns/op
                 gc.alloc.rate:      0,885 MB/sec
                 gc.alloc.rate.norm: 0,004 B/op
                 gc.count:           ≈ 0 counts

Iteration  10: 15,078 ns/op
                 gc.alloc.rate:      0,904 MB/sec
                 gc.alloc.rate.norm: 0,015 B/op
                 gc.count:           1,000 counts
                 gc.time:            2,000 ms



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup":
  5,827 ±(99.9%) 5,373 ns/op [Average]
  (min, avg, max) = (3,386, 5,827, 15,078), stdev = 3,554
  CI (99.9%): [0,453, 11,200] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate":
  47,720 ±(99.9%) 223,998 MB/sec [Average]
  (min, avg, max) = (0,630, 47,720, 469,393), stdev = 148,161
  CI (99.9%): [≈ 0, 271,718] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate.norm":
  0,487 ±(99.9%) 2,304 B/op [Average]
  (min, avg, max) = (0,003, 0,487, 4,825), stdev = 1,524
  CI (99.9%): [≈ 0, 2,791] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.count":
  7,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (≈ 0, 0,700, 1,000), stdev = 0,483
  CI (99.9%): [7,000, 7,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectNoWarmup:gc.time":
  19,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (≈ 0, 1,900, 7,000), stdev = 2,079
  CI (99.9%): [19,000, 19,000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime

# Run progress: 60,35% complete, ETA 00:00:04
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 64,989 ±(99.9%) 86,584 ns/op
# Warmup Iteration   2: 36,092 ±(99.9%) 28,260 ns/op
Iteration   1: 30,096 ±(99.9%) 5,419 ns/op
                 gc.alloc.rate:      0,006 MB/sec
                 gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 gc.count:           53,000 counts
                 gc.time:            84,000 ms
                 p0.00:              ≈ 0 ns/op
                 p0.50:              41,000 ns/op
                 p0.90:              42,000 ns/op
                 p0.95:              42,000 ns/op
                 p0.99:              42,000 ns/op
                 p0.999:             208,000 ns/op
                 p0.9999:            2956,286 ns/op
                 p1.00:              87424,000 ns/op



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime":
  N = 71056
  mean =     30,096 ±(99.9%) 5,419 ns/op

  Histogram, ns/op:
    [    0,000,  5000,000) = 71050 
    [ 5000,000, 10000,000) = 2 
    [10000,000, 15000,000) = 2 
    [15000,000, 20000,000) = 0 
    [20000,000, 25000,000) = 0 
    [25000,000, 30000,000) = 0 
    [30000,000, 35000,000) = 0 
    [35000,000, 40000,000) = 0 
    [40000,000, 45000,000) = 0 
    [45000,000, 50000,000) = 0 
    [50000,000, 55000,000) = 0 
    [55000,000, 60000,000) = 0 
    [60000,000, 65000,000) = 0 
    [65000,000, 70000,000) = 0 
    [70000,000, 75000,000) = 1 
    [75000,000, 80000,000) = 0 
    [80000,000, 85000,000) = 0 

  Percentiles, ns/op:
      p(0,0000) =        ≈ 0 ns/op
     p(50,0000) =     41,000 ns/op
     p(90,0000) =     42,000 ns/op
     p(95,0000) =     42,000 ns/op
     p(99,0000) =     42,000 ns/op
     p(99,9000) =    208,000 ns/op
     p(99,9900) =   2956,286 ns/op
     p(99,9990) =  87424,000 ns/op
     p(99,9999) =  87424,000 ns/op
    p(100,0000) =  87424,000 ns/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate":
  0,006 MB/sec

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.count":
  53,000 counts

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSampleTime:gc.time":
  84,000 ms


# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot

# Run progress: 99,93% complete, ETA 00:00:00
# Fork: 1 of 1
The Dynamic Halt is NOT Active
# Warmup Iteration   1: 9583,000 ns/op
# Warmup Iteration   2: 62708,000 ns/op
Iteration   1: 2375,000 ns/op
                 gc.alloc.rate:      45,194 MB/sec
                 gc.alloc.rate.norm: 10560,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 2125,000 ns/op
                 gc.alloc.rate:      45,051 MB/sec
                 gc.alloc.rate.norm: 10560,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 1959,000 ns/op
                 gc.alloc.rate:      39,346 MB/sec
                 gc.alloc.rate.norm: 10560,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   4: 3041,000 ns/op
                 gc.alloc.rate:      36,112 MB/sec
                 gc.alloc.rate.norm: 10560,000 B/op
                 gc.count:           ≈ 0 counts

Iteration   5: 2209,000 ns/op
                 gc.alloc.rate:      22,563 MB/sec
                 gc.alloc.rate.norm: 10560,000 B/op
                 gc.count:           ≈ 0 counts



Result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot":
  N = 5
  mean =   2341,800 ±(99.9%) 1612,170 ns/op

  Histogram, ns/op:
    [1000,000, 1250,000) = 0 
    [1250,000, 1500,000) = 0 
    [1500,000, 1750,000) = 0 
    [1750,000, 2000,000) = 1 
    [2000,000, 2250,000) = 2 
    [2250,000, 2500,000) = 1 
    [2500,000, 2750,000) = 0 
    [2750,000, 3000,000) = 0 
    [3000,000, 3250,000) = 1 
    [3250,000, 3500,000) = 0 
    [3500,000, 3750,000) = 0 

  Percentiles, ns/op:
      p(0,0000) =   1959,000 ns/op
     p(50,0000) =   2209,000 ns/op
     p(90,0000) =   3041,000 ns/op
     p(95,0000) =   3041,000 ns/op
     p(99,0000) =   3041,000 ns/op
     p(99,9000) =   3041,000 ns/op
     p(99,9900) =   3041,000 ns/op
     p(99,9990) =   3041,000 ns/op
     p(99,9999) =   3041,000 ns/op
    p(100,0000) =   3041,000 ns/op

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate":
  37,653 ±(99.9%) 35,737 MB/sec [Average]
  (min, avg, max) = (22,563, 37,653, 45,194), stdev = 9,281
  CI (99.9%): [1,916, 73,391] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate.norm":
  10560,000 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (10560,000, 10560,000, 10560,000), stdev = 0,001
  CI (99.9%): [10560,000, 10560,000] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.profilers.GCProfilerTest.allocateObjectSingleShot:gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:00:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode    Cnt      Score      Error   Units
GCProfilerTest.allocateObject                                 avgt      2      3,591              ns/op
GCProfilerTest.allocateObject:gc.alloc.rate                   avgt      2      0,006             MB/sec
GCProfilerTest.allocateObject:gc.alloc.rate.norm              avgt      2     ≈ 10⁻⁵               B/op
GCProfilerTest.allocateObject:gc.count                        avgt      2    203,000             counts
GCProfilerTest.allocateObject:gc.time                         avgt      2    217,000                 ms
GCProfilerTest.allocateObjectNoWarmup                         avgt     10      5,827 ±    5,373   ns/op
GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate           avgt     10     47,720 ±  223,998  MB/sec
GCProfilerTest.allocateObjectNoWarmup:gc.alloc.rate.norm      avgt     10      0,487 ±    2,304    B/op
GCProfilerTest.allocateObjectNoWarmup:gc.count                avgt     10      7,000             counts
GCProfilerTest.allocateObjectNoWarmup:gc.time                 avgt     10     19,000                 ms
GCProfilerTest.allocateObjectSampleTime                     sample  71056     30,096 ±    5,419   ns/op
GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate       sample             0,006             MB/sec
GCProfilerTest.allocateObjectSampleTime:gc.alloc.rate.norm  sample            ≈ 10⁻⁴               B/op
GCProfilerTest.allocateObjectSampleTime:gc.count            sample            53,000             counts
GCProfilerTest.allocateObjectSampleTime:gc.time             sample            84,000                 ms
GCProfilerTest.allocateObjectSampleTime:p0.00               sample               ≈ 0              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.50               sample            41,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.90               sample            42,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.95               sample            42,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.99               sample            42,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.999              sample           208,000              ns/op
GCProfilerTest.allocateObjectSampleTime:p0.9999             sample          2956,286              ns/op
GCProfilerTest.allocateObjectSampleTime:p1.00               sample         87424,000              ns/op
GCProfilerTest.allocateObjectSingleShot                         ss      5   2341,800 ± 1612,170   ns/op
GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate           ss      5     37,653 ±   35,737  MB/sec
GCProfilerTest.allocateObjectSingleShot:gc.alloc.rate.norm      ss      5  10560,000 ±    0,001    B/op
GCProfilerTest.allocateObjectSingleShot:gc.count                ss      5        ≈ 0             counts
