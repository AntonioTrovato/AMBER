# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.CountingExternalProfilerTest.bench

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 62827615,404 ops/s
# Processing profiler results: CountingExternalProfiler 


Result "org.openjdk.jmh.it.profilers.CountingExternalProfilerTest.bench":
  62827615,404 ops/s


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                            Mode  Cnt         Score   Error  Units
CountingExternalProfilerTest.bench  thrpt       62827615,404          ops/s
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.CountingExternalProfilerTest.bench

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 23282476,662 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 20,00% complete, ETA 00:00:01
# Fork: 2 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 49152465,473 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 40,00% complete, ETA 00:00:01
# Fork: 3 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 129800465,959 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 60,00% complete, ETA 00:00:00
# Fork: 4 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 176650677,672 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 80,00% complete, ETA 00:00:00
# Fork: 5 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 539704524,945 ops/s
# Processing profiler results: CountingExternalProfiler 


Result "org.openjdk.jmh.it.profilers.CountingExternalProfilerTest.bench":
  183718122,142 ±(99.9%) 802032130,479 ops/s [Average]
  (min, avg, max) = (23282476,662, 183718122,142, 539704524,945), stdev = 208285197,323
  CI (99.9%): [≈ 0, 985750252,621] (assumes normal distribution)


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                            Mode  Cnt          Score           Error  Units
CountingExternalProfilerTest.bench  thrpt    5  183718122,142 ± 802032130,479  ops/s
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.CountingExternalProfilerTest.bench

# Run progress: 0,00% complete, ETA 00:00:00
# Warmup Fork: 1 of 1
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 117222260,819 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 50,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 38610773,283 ops/s
# Processing profiler results: CountingExternalProfiler 


Result "org.openjdk.jmh.it.profilers.CountingExternalProfilerTest.bench":
  38610773,283 ops/s


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                            Mode  Cnt         Score   Error  Units
CountingExternalProfilerTest.bench  thrpt       38610773,283          ops/s
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.CountingExternalProfilerTest.bench

# Run progress: 0,00% complete, ETA 00:00:00
# Warmup Fork: 1 of 1
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 26280004,473 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 16,67% complete, ETA 00:00:01
# Fork: 1 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 43477187,872 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 33,33% complete, ETA 00:00:01
# Fork: 2 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 187437659,122 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 50,00% complete, ETA 00:00:00
# Fork: 3 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 383402070,430 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 66,67% complete, ETA 00:00:00
# Fork: 4 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 193934398,359 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 83,33% complete, ETA 00:00:00
# Fork: 5 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 26432258,244 ops/s
# Processing profiler results: CountingExternalProfiler 


Result "org.openjdk.jmh.it.profilers.CountingExternalProfilerTest.bench":
  166936714,805 ±(99.9%) 554647033,921 ops/s [Average]
  (min, avg, max) = (26432258,244, 166936714,805, 383402070,430), stdev = 144040073,352
  CI (99.9%): [≈ 0, 721583748,726] (assumes normal distribution)


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                            Mode  Cnt          Score           Error  Units
CountingExternalProfilerTest.bench  thrpt    5  166936714,805 ± 554647033,921  ops/s
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.CountingExternalProfilerTest.bench

# Run progress: 0,00% complete, ETA 00:00:00
# Warmup Fork: 1 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 109196174,439 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 16,67% complete, ETA 00:00:01
# Warmup Fork: 2 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 112869517,607 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 33,33% complete, ETA 00:00:01
# Warmup Fork: 3 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 228631124,308 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 50,00% complete, ETA 00:00:00
# Warmup Fork: 4 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 120711675,930 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 66,67% complete, ETA 00:00:00
# Warmup Fork: 5 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 74882495,670 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 83,33% complete, ETA 00:00:00
# Fork: 1 of 1
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 65794669,535 ops/s
# Processing profiler results: CountingExternalProfiler 


Result "org.openjdk.jmh.it.profilers.CountingExternalProfilerTest.bench":
  65794669,535 ops/s


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                            Mode  Cnt         Score   Error  Units
CountingExternalProfilerTest.bench  thrpt       65794669,535          ops/s
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.profilers.CountingExternalProfilerTest.bench

# Run progress: 0,00% complete, ETA 00:00:00
# Warmup Fork: 1 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 769067896,341 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 10,00% complete, ETA 00:00:02
# Warmup Fork: 2 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 10533020,305 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 20,00% complete, ETA 00:00:02
# Warmup Fork: 3 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 95718274,829 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 30,00% complete, ETA 00:00:01
# Warmup Fork: 4 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 2126973,712 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 40,00% complete, ETA 00:00:01
# Warmup Fork: 5 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 496061748,520 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 50,00% complete, ETA 00:00:01
# Fork: 1 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 34224700,420 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 60,00% complete, ETA 00:00:01
# Fork: 2 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 53919797,342 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 70,00% complete, ETA 00:00:00
# Fork: 3 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 42627732,618 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 80,00% complete, ETA 00:00:00
# Fork: 4 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 36894244,241 ops/s
# Processing profiler results: CountingExternalProfiler 

# Run progress: 90,00% complete, ETA 00:00:00
# Fork: 5 of 5
# Preparing profilers: CountingExternalProfiler 
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
Iteration   1: 41220915,687 ops/s
# Processing profiler results: CountingExternalProfiler 


Result "org.openjdk.jmh.it.profilers.CountingExternalProfilerTest.bench":
  41777478,062 ±(99.9%) 29158238,996 ops/s [Average]
  (min, avg, max) = (34224700,420, 41777478,062, 53919797,342), stdev = 7572302,071
  CI (99.9%): [12619239,065, 70935717,058] (assumes normal distribution)


# Run complete. Total time: 00:00:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                            Mode  Cnt         Score          Error  Units
CountingExternalProfilerTest.bench  thrpt    5  41777478,062 ± 29158238,996  ops/s
