# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 100 ms each
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.it.auxcounters.AuxCountersEventsTest.test

# Run progress: 0,00% complete, ETA 00:00:01
# Fork: 1 of 1
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
# Warmup Iteration   1: 84,269 ops/s
# Warmup Iteration   2: 80,721 ops/s
# Warmup Iteration   3: 81,235 ops/s
# Warmup Iteration   4: 81,114 ops/s
# Warmup Iteration   5: 80,195 ops/s
Iteration   1: 83,768 ops/s
                 cnt: 42,000 #

Iteration   2: 81,321 ops/s
                 cnt: 42,000 #

Iteration   3: 81,813 ops/s
                 cnt: 42,000 #

Iteration   4: 82,837 ops/s
                 cnt: 42,000 #

Iteration   5: 83,094 ops/s
                 cnt: 42,000 #



Result "org.openjdk.jmh.it.auxcounters.AuxCountersEventsTest.test":
  82,567 ±(99.9%) 3,810 ops/s [Average]
  (min, avg, max) = (81,321, 82,567, 83,768), stdev = 0,989
  CI (99.9%): [78,757, 86,376] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.auxcounters.AuxCountersEventsTest.test:cnt":
  210,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (42,000, 42,000, 42,000), stdev = 0,001
  CI (99.9%): [210,000, 210,000] (assumes normal distribution)


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                        Mode  Cnt    Score   Error  Units
AuxCountersEventsTest.test      thrpt    5   82,567 ± 3,810  ops/s
AuxCountersEventsTest.test:cnt  thrpt    5  210,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 100 ms each
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.it.auxcounters.AuxCountersEventsTest.test

# Run progress: 0,00% complete, ETA 00:00:01
# Fork: 1 of 1
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
# Warmup Iteration   1: 0,012 s/op
# Warmup Iteration   2: 0,012 s/op
# Warmup Iteration   3: 0,012 s/op
# Warmup Iteration   4: 0,012 s/op
# Warmup Iteration   5: 0,012 s/op
Iteration   1: 0,012 s/op
                 cnt: 42,000 #

Iteration   2: 0,012 s/op
                 cnt: 42,000 #

Iteration   3: 0,012 s/op
                 cnt: 42,000 #

Iteration   4: 0,012 s/op
                 cnt: 42,000 #

Iteration   5: 0,012 s/op
                 cnt: 42,000 #



Result "org.openjdk.jmh.it.auxcounters.AuxCountersEventsTest.test":
  0,012 ±(99.9%) 0,001 s/op [Average]
  (min, avg, max) = (0,012, 0,012, 0,012), stdev = 0,001
  CI (99.9%): [0,011, 0,013] (assumes normal distribution)

Secondary result "org.openjdk.jmh.it.auxcounters.AuxCountersEventsTest.test:cnt":
  210,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (42,000, 42,000, 42,000), stdev = 0,001
  CI (99.9%): [210,000, 210,000] (assumes normal distribution)


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
AuxCountersEventsTest.test      avgt    5    0,012 ± 0,001   s/op
AuxCountersEventsTest.test:cnt  avgt    5  210,000              #
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 100 ms each
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.openjdk.jmh.it.auxcounters.AuxCountersEventsTest.test

# Run progress: 0,00% complete, ETA 00:00:01
# Fork: 1 of 1
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
# Warmup Iteration   1: 0,012 ±(99.9%) 0,001 s/op
# Warmup Iteration   2: 0,012 ±(99.9%) 0,001 s/op
# Warmup Iteration   3: 0,012 ±(99.9%) 0,003 s/op
# Warmup Iteration   4: 0,012 ±(99.9%) 0,001 s/op
# Warmup Iteration   5: 0,012 ±(99.9%) 0,001 s/op
Iteration   1: 0,012 ±(99.9%) 0,001 s/op
                 cnt:     42,000 #
                 p0.00:   0,011 s/op
                 p0.50:   0,013 s/op
                 p0.90:   0,013 s/op
                 p0.95:   0,013 s/op
                 p0.99:   0,013 s/op
                 p0.999:  0,013 s/op
                 p0.9999: 0,013 s/op
                 p1.00:   0,013 s/op

Iteration   2: 0,012 ±(99.9%) 0,001 s/op
                 cnt:     42,000 #
                 p0.00:   0,010 s/op
                 p0.50:   0,013 s/op
                 p0.90:   0,013 s/op
                 p0.95:   0,013 s/op
                 p0.99:   0,013 s/op
                 p0.999:  0,013 s/op
                 p0.9999: 0,013 s/op
                 p1.00:   0,013 s/op

Iteration   3: 0,012 ±(99.9%) 0,001 s/op
                 cnt:     42,000 #
                 p0.00:   0,011 s/op
                 p0.50:   0,013 s/op
                 p0.90:   0,013 s/op
                 p0.95:   0,013 s/op
                 p0.99:   0,013 s/op
                 p0.999:  0,013 s/op
                 p0.9999: 0,013 s/op
                 p1.00:   0,013 s/op

Iteration   4: 0,012 ±(99.9%) 0,001 s/op
                 cnt:     42,000 #
                 p0.00:   0,011 s/op
                 p0.50:   0,013 s/op
                 p0.90:   0,013 s/op
                 p0.95:   0,013 s/op
                 p0.99:   0,013 s/op
                 p0.999:  0,013 s/op
                 p0.9999: 0,013 s/op
                 p1.00:   0,013 s/op

Iteration   5: 0,013 ±(99.9%) 0,002 s/op
                 cnt:     42,000 #
                 p0.00:   0,010 s/op
                 p0.50:   0,013 s/op
                 p0.90:   0,014 s/op
                 p0.95:   0,014 s/op
                 p0.99:   0,014 s/op
                 p0.999:  0,014 s/op
                 p0.9999: 0,014 s/op
                 p1.00:   0,014 s/op



Result "org.openjdk.jmh.it.auxcounters.AuxCountersEventsTest.test":
  N = 46
  mean =      0,012 ±(99.9%) 0,001 s/op

  Histogram, s/op:
    [0,010, 0,010) = 1 
    [0,010, 0,011) = 1 
    [0,011, 0,011) = 0 
    [0,011, 0,011) = 2 
    [0,011, 0,011) = 2 
    [0,011, 0,012) = 2 
    [0,012, 0,012) = 1 
    [0,012, 0,012) = 2 
    [0,012, 0,012) = 3 
    [0,012, 0,013) = 1 
    [0,013, 0,013) = 26 
    [0,013, 0,013) = 1 
    [0,013, 0,013) = 0 
    [0,013, 0,014) = 2 
    [0,014, 0,014) = 1 

  Percentiles, s/op:
      p(0,0000) =      0,010 s/op
     p(50,0000) =      0,013 s/op
     p(90,0000) =      0,013 s/op
     p(95,0000) =      0,013 s/op
     p(99,0000) =      0,014 s/op
     p(99,9000) =      0,014 s/op
     p(99,9900) =      0,014 s/op
     p(99,9990) =      0,014 s/op
     p(99,9999) =      0,014 s/op
    p(100,0000) =      0,014 s/op

Secondary result "org.openjdk.jmh.it.auxcounters.AuxCountersEventsTest.test:cnt":
  210,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (42,000, 42,000, 42,000), stdev = 0,001
  CI (99.9%): [210,000, 210,000] (assumes normal distribution)


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt    Score    Error  Units
AuxCountersEventsTest.test          sample   46    0,012 ±  0,001   s/op
AuxCountersEventsTest.test:cnt      sample    5  210,000               #
AuxCountersEventsTest.test:p0.00    sample         0,010            s/op
AuxCountersEventsTest.test:p0.50    sample         0,013            s/op
AuxCountersEventsTest.test:p0.90    sample         0,013            s/op
AuxCountersEventsTest.test:p0.95    sample         0,013            s/op
AuxCountersEventsTest.test:p0.99    sample         0,014            s/op
AuxCountersEventsTest.test:p0.999   sample         0,014            s/op
AuxCountersEventsTest.test:p0.9999  sample         0,014            s/op
AuxCountersEventsTest.test:p1.00    sample         0,014            s/op
# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# JMH version: 1.37
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /Users/antoniotrovato/Library/Java/JavaVirtualMachines/corretto-1.8.0_432/Contents/Home/jre/bin/java
# VM options: -Djmh.ignoreLock=true -Xms256m -Xmx256m -Djmh.core.it.profile=default
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 100 ms each
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.it.auxcounters.AuxCountersEventsTest.test

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
The dynamic halt can be used only when the durations of warm-up and measurement iterations are at least 100ms, and when the total amount of iterations within a fork is at least 100.
# Warmup Iteration   1: 0,012 s/op
# Warmup Iteration   2: 0,012 s/op
# Warmup Iteration   3: 0,013 s/op
# Warmup Iteration   4: 0,013 s/op
# Warmup Iteration   5: 0,013 s/op
Iteration   1: 0,010 s/op
                 cnt: 42,000 #

Iteration   2: 0,013 s/op
                 cnt: 42,000 #

Iteration   3: 0,011 s/op
                 cnt: 42,000 #

Iteration   4: 0,012 s/op
                 cnt: 42,000 #

Iteration   5: 0,013 s/op
                 cnt: 42,000 #



Result "org.openjdk.jmh.it.auxcounters.AuxCountersEventsTest.test":
  N = 5
  mean =      0,012 ±(99.9%) 0,004 s/op

  Histogram, s/op:
    [0,010, 0,010) = 1 
    [0,010, 0,011) = 0 
    [0,011, 0,011) = 0 
    [0,011, 0,011) = 1 
    [0,011, 0,011) = 0 
    [0,011, 0,012) = 0 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 0 
    [0,012, 0,012) = 0 
    [0,012, 0,013) = 1 
    [0,013, 0,013) = 2 
    [0,013, 0,013) = 0 

  Percentiles, s/op:
      p(0,0000) =      0,010 s/op
     p(50,0000) =      0,012 s/op
     p(90,0000) =      0,013 s/op
     p(95,0000) =      0,013 s/op
     p(99,0000) =      0,013 s/op
     p(99,9000) =      0,013 s/op
     p(99,9900) =      0,013 s/op
     p(99,9990) =      0,013 s/op
     p(99,9999) =      0,013 s/op
    p(100,0000) =      0,013 s/op

Secondary result "org.openjdk.jmh.it.auxcounters.AuxCountersEventsTest.test:cnt":
  210,000 ±(99.9%) 0,001 # [Sum]
  (min, avg, max) = (42,000, 42,000, 42,000), stdev = 0,001
  CI (99.9%): [210,000, 210,000] (assumes normal distribution)


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
AuxCountersEventsTest.test        ss    5    0,012 ± 0,004   s/op
AuxCountersEventsTest.test:cnt    ss    5  210,000              #
